Binary parsing
  http://perltricks.com/article/how-to-parse-binary-data-with-perl/
  https://perlhacks.com/2014/04/data-munging-perl/
  http://www.perlmonks.org/?node_id=53473
  http://www.perlmonks.org/?node_id=224666
  https://www.effectiveperlprogramming.com/
  http://perldoc.perl.org/perlpacktut.html


Positional jump
  https://www.perlmonks.org/?node_id=1026297
  $ say unpack 'a(a.*a)a', 'ABCDEFGH';      # prints AB2CD
  $ say unpack 'aa(aa).*/Xaa', 'ABCDEFGH';  # prints ABCDAB
  $ say unpack 'aa(aa.*/Xaa)', 'ABCDEFGH';  # prints ABCDAB


Interval unpack of nested array
  | my @fastbins;
  | (@{$struct{fastbins}[0 .. 9]}, my ($text, $length)) = unpack("I10 Z I", $data);


Unpack oneliners
  Table of records
    $ perl -e 'my $i; print((++$i) % 4 ? $_ : $_, "\n") for unpack("(x C v V)*", <STDIN>)'
  Struct (header)
    $ perl -e 'print $_,"\n" for unpack("a3 c V V! a4 c c n a4 N N c c a4 a4 V v A*",<STDIN>)'


Use pre-partitioned lvalue-refs (lrefs) over readonly binary data (faster x100 > unpack)
  https://www.perlmonks.org/?node_id=1182397
    https://www.perlmonks.org/?node_id=535539
    | my $buffer = chr(0) x 4800;
    | my $header = \substr $buffer, 0, 300;
    | my @subs = map{ \substr( $buffer, 300 + $_ *18, 18 ) } 0 .. 249;
    | while( read( $fhTest, $buffer, 4800, 0 ) == 4800 ) {
    |     printf "H:%-20.20s first: %s last: %s\n", $$header, ${ $subs[0] }, ${ $subs[249] };
    |     $hash{ $$header } = [ map{ $$_ } @subs ];
    | }


BET:PERF: use mmap'ed file instead of streamline access to allow backward window iteration together with string view
  https://www.perlmonks.org/?node_id=801973
  https://www.effectiveperlprogramming.com/2010/01/memory-map-files-instead-of-slurping-them/
  BUT: no gain expected if we already read() whole block before unpack()


MAYBE: split into 8+ parts for multithreading
  REF: https://perldoc.perl.org/threads.html
