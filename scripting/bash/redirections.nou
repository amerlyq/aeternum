Redirections
  Connect to socket
  http://hacktux.com/bash/socket
    exec 3<>/dev/tcp/localhost/22

  Open-close streams
    http://www.tldp.org/LDP/abs/html/io-redirection.html

>http://wiki.bash-hackers.org/howto/redirection_tutorial
http://www.catonmat.net/blog/bash-one-liners-explained-part-three/
| FILENAME           | references a normal, ordinary filename from the filesystem (which can of course be a FIFO, too. Simply everything you can reference in the filesystem)
| &N                 | references the current target/source of the filedescriptor N ("duplicates" the filedescriptor)
| &-                 | closes the redirected filedescriptor, useful instead of > /dev/null constructs (> &-)
| /dev/fd/N          | duplicates the filedescriptor N, if N is a valid integer
| /dev/stdin         | duplicates filedescriptor 0 (stdin)
| /dev/stdout        | duplicates filedescriptor 1 (stdout)
| /dev/stderr        | duplicates filedescriptor 2 (stderr)
| /dev/tcp/HOST/PORT | assuming HOST is a valid hostname or IP address, and PORT is a valid port number or service name: redirect from/to the corresponding TCP socket
| /dev/udp/HOST/PORT | assuming HOST is a valid hostname or IP address, and PORT is a valid port number or service name: redirect from/to the corresponding UDP socket
| $(tty)

{ echo err 1>&2; echo nrm; } 3>&1 1>&2 2>&3 3>&- | cat NO

Access a website through bash
$ exec 3<>/dev/tcp/www.google.com/80
$ echo -e "GET / HTTP/1.1\n\n" >&3
$ cat <&3

Back-pipe for proxy
  This starts a nc server on port 12345 and all the connections
  get redirected to google.com:80 and back.
  $ mkfifo backpipe
  $ nc -l 12345  0<backpipe | nc www.google.com 80 1>backpipe

Capture both &1 and &2
  Two different vars
    . <({ berr=$({ bout=$(banana); } 2>&1; declare -p bout >&2); declare -p berr; } 2>&1)
  With exit code
    . <({ berr=$({ bout=$(banana); bret=$?; } 2>&1; declare -p bout bret >&2); declare -p berr; } 2>&1)
    eval "$({ berr=$({ bout=$(banana); bret=$?; } 2>&1; declare -p bout bret >&2); declare -p berr; } 2>&1)"
  For arrays
    . <({ berr=$({ mapfile -t bout < <(banana); } 2>&1; declare -p bout >&2); declare -p berr; } 2>&1)
    . <({ berr=$({ mapfile -t bout< <(banana; bret=$?; declare -p bret >&3); } 3>&2 2>&1; declare -p bout >&2); declare -p berr; } 2>&1)

Merge output
  Contents of cmd1 and cmd2 after each other in the output:
    $ cat <(cmd1) <(cmd2) > file
  See contents side-by side (like numbers + names):
    $ paste <(cmd1) <(cmd2) > file
  Compare the output of two similar commands
    $ diff <(cmd1) <(cmd2) > file
  Merge ordered outputs
    $ sort -m <(cmd1) <(cmd2) > file
  Run both commands at once (could scramble things a bit, though):
    $ cat <(cmd1 & cmd2) > file
  Simultaneously send the output of one command
    $ command0 | tee >(cmd1) >(cmd2) >(command3) | command4

Capture but show in stdout
  $ VAR=$(cmd | tee /dev/tty)

Background interactive process
  Execute commands in a shell through a fifo file
  : http://www.catonmat.net/blog/bash-one-liners-explained-part-three/
  : OR: http://serverfault.com/questions/188936/writing-to-stdin-of-background-process
    mkfifo fifo && exec < fifo
    exec 3> fifo && echo 'cmdline' >&3

Process substitution error handling
  BAD:FIND: no normal way to terminate on error?
  + http://www.tldp.org/LDP/abs/html/process-sub.html
  http://mywiki.wooledge.org/ProcessSubstitution
  ++ http://stackoverflow.com/questions/7586589/bash-process-substitution-and-exit-codes
  http://stackoverflow.com/questions/4410201/pipe-status-after-command-substitution

Background process error handling
  BAD: Same as process substitution : no normal way to terminate on error?
  http://stackoverflow.com/questions/1570262/shell-get-exit-code-of-background-process
