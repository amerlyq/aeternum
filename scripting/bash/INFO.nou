ALT
  zsh
  rc
    http://plan9.bell-labs.com/sys/doc/rc.html
    + solid and robust
    - different syntax
  execline
    + fast startup
    - conflicting /bin names
  nash
    + written in Go
    https://github.com/NeowayLabs/nash
  dgsh - directed graph shell
    + bash-extended pipe graph syntax for for data streams
    http://www.spinellis.gr/sw/dgsh/

Cool man. Very cool
  >>> http://www.tldp.org/LDP/abs/html/abs-guide.html
  >>> http://tldp.org/LDP/abs/html/complexfunct.html
  >> http://tldp.org/LDP/abs/html/arrays.html#ARRAYSTROPS
  >> http://www.iitk.ac.in/LDP/LDP/abs/html/abs-guide.html#ONLINE
  > http://habrahabr.ru/post/221273/
  > http://www.davidpashley.com/articles/writing-robust-shell-scripts/
    BUT: -e doesn't do what expected:
      !!! http://mywiki.wooledge.org/BashFAQ/105
      http://webcache.googleusercontent.com/search?q=cache:fCMS7RcQsa4J:http://www.fvue.nl/wiki/Bash:_Error_handling%2Bbash++error+handling+function&hl=en&gbv=2&ct=clnk
      http://unix.stackexchange.com/questions/23026/how-can-i-get-bash-to-exit-on-backtick-failure-in-a-similar-way-to-pipefail
    Error handling
      http://phaq.phunsites.net/2010/11/22/trap-errors-exit-codes-and-line-numbers-within-a-bash-script/
      https://www.howtoforge.com/detailed-error-handling-in-bash
  [_] http://www.tuxradar.com/content/command-line-tricks-smart-geeks
  [_] http://redsymbol.net/articles/unofficial-bash-strict-mode/
  [_] http://www.etalabs.net/sh_tricks.html
  + [_] https://google.github.io/styleguide/shell.xml#Naming_Conventions
  REF:
    http://www.gnu.org/software/bash/manual/bashref.html#Bourne-Shell-Builtins
    ++ http://wiki.bash-hackers.org/commands/builtin/trap

-_ set -e
-_ set -o errexit
"Exit immediately if a simple command (see SHELL GRAMMAR above) exits with a
non-zero status. The shell does not exit if the command that fails is part of
the command list immediately following a while or until keyword, part of the
test in an if statement, part of a && or || list, or if the command's return
value is being inverted via !. A trap on ERR, if set, is executed before the
shell exits."

  set -o pipefail (POSIX/dash shell)
    # The "stock" answer for POSIX implementations of PIPESTATUS / pipefail
    $ $cmd && exit $${PIPESTATUS[0]}
    http://cfajohnson.com/shell/cus-faq-2.html#Q11


%%% Often mistakes. @Must read!
  I   http://habrahabr.ru/post/47706/
  II  http://habrahabr.ru/post/47915/
  III http://habrahabr.ru/post/48053/

  !!! http://mywiki.wooledge.org/BashGuide
    http://mywiki.wooledge.org/BashFAQ
    http://mywiki.wooledge.org/BashPitfalls

  Any changes to VAR, which already in ENV -- exported automatically!
    E.G: $ PATH=~/opt/bin:$PATH $ OR $ export aaa=33; aaa=55; env
    => No need to export => BUT it becomes error-prone in large scripts
    http://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path

  echo vs printf
    http://unix.stackexchange.com/questions/65803/why-is-printf-better-than-echo

  Always quote any $VAR
    http://unix.stackexchange.com/questions/131766/why-does-my-shell-script-choke-on-whitespace-or-other-special-characters
    http://wiki.bash-hackers.org/syntax/quoting

HACK
  DFL:  func() { ...; }
  ALSO: func() ( ... )  # prevent parameter assignments from affecting the calling shell execution environment
  TRY:  func() ...

Bash and cli commands list
  > http://ss64.com/bash/

Input cmdline limit (by kernel/os)
  getconf ARG_MAX

Tracing bash substitution on/off
  set -x
  set +x

Debug trick -- line by line execution
  set -x
  set -o nounset
  trap read debug
  SEE:(debuggers)
    http://bashdb.sourceforge.net/
    https://github.com/rocky/zshdb/wiki

Last argument: most/last
  http://stackoverflow.com/questions/1215538/extract-parameters-before-last-parameter-in

Snippets (with description)
  http://sed.sourceforge.net/grabbag/scripts/#sdeb

printf format
  http://wiki.bash-hackers.org/commands/builtin/printf

Timeout
  + http://unix.stackexchange.com/questions/10698/timing-out-in-a-shell-script
  http://unix.stackexchange.com/questions/43340/how-to-introduce-timeout-for-shell-scripting
  http://unix.stackexchange.com/questions/225434/silently-timeout-command-in-zsh
  http://stackoverflow.com/questions/392022/best-way-to-kill-all-child-processes
  http://stackoverflow.com/questions/10028820/bash-wait-with-timeout
