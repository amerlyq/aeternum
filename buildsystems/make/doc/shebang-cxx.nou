%%%% C++ #shebang

TRY:
  [_] use hash of content as name
  [_] use hash instead of timestamp = one-time compile
    BUT: how to delete files with obsolete hashes?

ALT:
  inverted self-compile by hooking link-time trampoline into main()
    ./airy/airy/lib/selfcompile.c


trivial: (with cache based on timestamps)
    BAD:SECU: possible cache file name collisions
  $ //usr/bin/test "$0" -ot "${out:=${TMPDIR:-/tmp}/$(readlink -e "$0"|tr / _)}" || gcc "$0" -o "$out" && exec "$out"
  $ //usr/bin/test "$0" -ot /tmp/a.out || gcc "$0" -o /tmp/a.out && exec /tmp/a.out  # BAD: same dst names
  $ //usr/bin/make -sf/dev/null LDFLAGS=-I. "$@" "${0%.*}" || exit && exec "${0%.*}"
  $ //usr/bin/g++ "$0" -o "${0%.*}" || exit && exec "${0%.*}"


multiline:
  $ //bin/false || mkdir -p "${d:=${TMPDIR:-/tmp}/${0%/*}}"; n=${0##*/}; n=${n%.*}; \
    //usr/bin/make -C "$d" -sf/dev/null -- VPATH="${0%/*}" "$n" || exit && exec "$d/$n"
  $ //bin/mkdir -p "/tmp${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}" && \
    //bin/true && exec make -C "$_" -sf/dev/null --eval="!:${n%.*};\$(CURDIR)/\$<" VPATH="$d" "$@"

  $ //bin/mkdir -p "${D:=/tmp${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}}" && \
    //usr/bin/make -C "$_" -sf/dev/null "$@" -- VPATH="$d" "${n%.*}" || exit && exec "$D/$_"

  BET? two lines of 76 width
  $ //bin/mkdir -p "/tmp${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}" && exec \
    //usr/bin/make -C "$_" -sf/dev/null --eval="!:${n%.*};./$<" VPATH="$d" "$@"

  $ //bin/mkdir -p "${O:=${TMPDIR:=/tmp}${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}}" && exec \
    //usr/bin/make -C "$O" -sf/dev/null --eval="!:${n%.*};./$<" VPATH="$d" "$@"

      DEBUG: $ ./$0 CXXFLAGS=-g ; coredumpctl gdb -r

explicit:
  $ //bin/true && set -eu && exec make X="${TMPDIR:-/tmp}/cxx" -srf/dev/null --eval='!:$X/$S;$<' --eval='$X/$S:$S;mkdir -p $(@D)&&$(LINK.cpp) $^ -o $@' "$@" S="$(realpath "$0")"
  $ //bin/true && exec make -C "${TMPDIR:-/tmp}/cxx" -{srf,o}/dev/null --eval='!:$(0:/%=%);./$<' --eval='$(0:/%=%):$0;mkdir -p $(@D)&&$(LINK.cpp) $^ -o $@' "$@" 0="$(realpath "$0")"
  $ //bin/true && mkdir -p "${TMPDIR:-/tmp}/cxx/${0%/*}" && exec make -C "$_" -{srf,o}/dev/null --eval='!:$X;./$<' --eval='$X:$0;$(LINK.cpp) $^ -o $@' "$@" 0="$(realpath "$0")" X="${0##*/}"


implicit:
  $ //usr/bin/make -C "${TMPDIR:-/tmp}" -sf/dev/null --eval '.SUFFIXES: .$E' --eval='vpath %.$E $(dir $X)' --eval='$(MAKEFILE_LIST): $(notdir $X) ; ./$<' "$@" -- "E=${0##*.}" "X=$(realpath "${0%.*}")"; exit
  $ //bin/true && mkdir -p "${TMPDIR:-/tmp}/cxx/${0%/*}" && exec make -C "$_" -{sf,o}/dev/null --eval='!:$(basename $X);./$<' --eval='vpath %$(suffix $X) $(dir $0)' "$@" 0="$(realpath "$0")" X="${0##*/}"
  $ //bin/true && mkdir -p "${TMPDIR:-/tmp}/cxx/${0%/*}" && exec make -C "$_" -{sf,o}/dev/null --eval='!:$(basename $(notdir $0));./$<' --eval='vpath %$(suffix $0) $(dir $0)' "$@" 0="$(realpath "$0")"
  $ //bin/true && exec make -{sf,o}/dev/null --eval='!:$X/$(basename $0);$<' --eval '$X/$0:$0;install -DT -- $< $@' "$@" 0="$(realpath "$0")" X="${TMPDIR:-/tmp}/cxx" CXXFLAGS="-I${0%/*}"
  $ //bin/mkdir -p "/tmp${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}" && exec make -C "$_" -sf/dev/null --eval="!:${n%.*};\$(CURDIR)/\$<" VPATH="$d" "$@"


NOT
  $ //usr/bin/install -pDT "$0" "${TMPDIR:-/tmp}/cxx/$0" || exit && exec make -{sf,o}/dev/null --eval="!:${0##*/};./\$<" "$@"


embedding:
  |auto-cache|
  ```
    #if 0
    set -fCueEo pipefail
    s=${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}
    mkdir -p "${x:=${TMPDIR:-/tmp}/$s}"
    make -C "$x" -sf- VPATH="${s%/*}" "${n%.*}" <<EOT
    CXXFLAGS += -std=c++17 -DSRCPATH='"$s"'
    LDFLAGS += -lSDL2 -lSDL2_image
    EOT
    exec "$x/${n%.*}" "$@"
    #endif
  ```

  |fast-recipes|
  ```
    #if 0
    exe=${x:=${TMPDIR:-/tmp}/${d:=$(realpath -s "${0%/*}")}/${n:=${0##*/}}}/${n%.*}
    make -srRf- src="$0" exe="$exe" <<'EOT' && exec ${RUN-} "$exe" "$@" || exit
    CXXFLAGS += -Wall -std=c++11 $(shell sdl2-config --cflags)
    LDLIBS += $(shell sdl2-config --libs) -lGLEW -lGL -lCg -lCgGL
    $(exe): $(src) ; mkdir -p '$(@D)' && $(or $(CXX),g++) \
    $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH) '$^' $(LOADLIBES) $(LDLIBS) -o '$@'
    EOT
    #endif
  ```

  |multi-build|
    https://stackoverflow.com/questions/2482348/run-c-or-c-file-as-a-script
  ```
    #if 0
    make $@ -f - <<EOF
    all: foo
    foo.o:
       cc -c -o foo.o -DFOO_C $0
    bar.o:
       cc -c -o bar.o -DBAR_C $0
    foo: foo.o bar.o
       cc -o foo foo.o bar.o
    EOF
    exit;
    #endif

    #ifdef FOO_C

    #include <stdlib.h>
    extern void bar();
    int main(int argc, char* argv[]) {
        bar();
        return EXIT_SUCCESS;
    }

    #endif

    #ifdef BAR_C
    void bar() {
       puts("bar!");
    }
    #endif
  ```
