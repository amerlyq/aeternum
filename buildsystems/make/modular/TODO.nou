TODO
  [_] READ current buildroot, etc. sources
    * config of single mod
    * installing chain -- staging / rootfs / etc.
  [_] READ look into "linux" build process


INFO
  CMP: https://stackoverflow.com/questions/559216/what-is-your-experience-with-non-recursive-make
  Recursive Make Considered Harmful - Aegis
    http://aegis.sourceforge.net/auug97.pdf
  Non-recursive Make Considered Harmful - GHC/Haskell
    https://www.microsoft.com/en-us/research/wp-content/uploads/2016/03/hadrian.pdf
  Non-recursive boilerplate examples
    BAD: too cryptic, no transparency
    VIZ:
      https://github.com/dmoulding/boilermake
      https://github.com/igagis/prorab


ARCH
  project
    products
      components
        modules
          sources


CASE
  Build whole firmware
    * export must always be rebuilt if import changes
    * import-export deps are resolved inside single non-recursive make
    * still you must traverse all components and query their interpreters if they require rebuild
      ! only component itself knows if its sources are updated and export must be rebuilt
      ? how to do "query" efficiently ?


USAGE:
  auto-build whole firmware
  dev-build whole firmware
  dev-build single dependency
  no special targets
    "rootfs", "linux", "toolchain" are same root dirs as everything else
  delete ./_build/<mod>/ dir for clean rebuild


VIZ.
  direct recursing (our firmware)
    :: mod: $(read mod/deps.txt)
    => dev-build single dependency -- must be also done only through global interface
    !! FAIL: breaks "build->install order-deps" because "build" and "install" called in different nested processes
    -- too many recursive process spawning
  direct sourcing (buildroot)
    :: include mod/config.mk
    -- need distinct targets and vars for all mods
    -- too many sourcing at once isn't fast either (e.g. 200 mods)
    ?? THINK: make optional sourcing or recursing depending on existence of "config.mk" or only "Makefile"
      !! BET: be consistent with hardcoded inflexible ifc !!
  reverse recursing
    :: cd rootfs && make -> builds rootfs from all its dependencies
    ++ easy to choose necessary target by simply going into expected directory
    => to build with deps
  reverse sourcing
  recursive reverse sourcing (usr_pkgs)


VIZ: different kinds of tests
  * run-host-configure-tests (host requirements self-testing)
  * run-host-tests
  * make-target-tests
  * emu-run-target-tests
  * make-rootfs-with-target-tests
  * make-mixin-rootfs-with-target-tests
