fPIE / fPIC
  + REF: https://stackoverflow.com/questions/46608677/cmake-handle-linking-of-shared-library-with-static-libraries
    = see waterfall of options to conditionally enable PIC

  ATT: don't enable until absolutely necessary (security requirements)
    * fPIE does not provide security on 32bit at all (SEE: exploit return-to-libc)
    * PIC is harder to debug -- don't take a grudge out on triage developers
    set(CMAKE_POSITION_INDEPENDENT_CODE OFF)
      BAD! if set to OFF -- then PIC will be disabled even for SHARED libraries
        https://cmake.org/cmake/help/v3.2/prop_tgt/POSITION_INDEPENDENT_CODE.html
          WARN: {CMAKE_SHARED_LIBRARY_CXX_FLAGS = "-fPIC"} is ignored
      BET:DFL: keep as-is on old gcc and pass "-no-pie" for new gcc

  NOTE: new GCC>=6 (linker) enables PIE by default
    SEE:REQ: https://gitlab.kitware.com/cmake/cmake/issues/16561
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-no-pie" SUPPORTS_CXXFLAG_nopie)
    if(SUPPORTS_CXXFLAG_nopie)
      # add_compile_options(-fno-pie)
      # WARN: seems like CMAKE_EXE_LINKER_FLAGS don't work on cmdline
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -no-pie")
    endif()

If such relocs present -- it's not PIC
  $ readelf --relocs *.o | awk '$3~/^R_/ && $5!~/^\.debug/{print $3}' | sort -u | grep 'R_X86_64_32S\?'

Add -fPIC only when necessary for reused external targets (if CMAKE_POSITION_INDEPENDENT_CODE = OFF)
  # EXPL:REF: https://cmake.org/pipermail/cmake-developers/2012-May/015839.html
  # https://cmake.org/pipermail/cmake/2015-April/060312.html
  add_subdirectory(/path/to/ext_module ${CMAKE_BINARY_DIR}/ext_module)
  get_target_property(some_TYPE SomeExtTargetName TYPE)
  if(some_TYPE STREQUAL "SHARED_LIBRARY")
    set_property(TARGET SomeExtTargetName PROPERTY POSITION_INDEPENDENT_CODE ON)
  endif()

Mixed SHARED and STATIC linking (no -fPIC)
  https://cmake.org/pipermail/cmake/2015-April/060312.html
