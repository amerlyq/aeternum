ALT:CMP:
  VIZ: https://caiorss.github.io/C-Cpp-Notes/building-systems.html
  REF: https://en.wikipedia.org/wiki/List_of_build_automation_software
  CMP: CMake vs others – Short investigation of potential Build systems for Embedded Devices | Atanas Rusev
    https://atanasrusev.com/2019/04/10/cmake-vs-others-short-investigation-of-potential-build-systems-for-embedded-devices/
    ::: CMake wins for complex projects, custom Makefile -- for simple ones
  https://waf.io/
  Buck: A fast build tool by Facebook
    https://buck.build/
  The Meson Build system
    https://mesonbuild.com/
    https://www.opennet.ru/opennews/art.shtml?num=47031
    BLOG: pacman now uses Meson
      http://allanmcrae.com/2019/10/pacman-5-2-release/
    cross-compiling
      https://mesonbuild.com/Cross-compilation.html
      https://github.com/mesonbuild/meson/issues/2283
      https://stackoverflow.com/questions/57460911/how-to-build-cross-compile-an-existing-meson-or-cmake-project-under-android-aosp
    BAD! https://www.rojtberg.net/1481/do-not-use-meson/
  Ninja
    gn
      https://gn.googlesource.com/gn/+/master/README.md
      https://gn.googlesource.com/gn/+/master/docs/reference.md
  Wrappers over CMake
    https://www.mail-archive.com/cmake-developers@cmake.org/msg15199.html
  bake
    REF: https://github.com/SanderMertens/bake
    TALK https://www.reddit.com/r/C_Programming/comments/a85f6w/meet_bake_a_new_build_system_package_manager_for/

  TALK:CMP: 2016
    https://www.reddit.com/r/cpp/comments/524844/recommend_a_build_system/


RENAME: :/aeternum/buildsystems -> :/aeternum/buildtools
  * it's more logical and will allow to contain all tools in single flat hierarchy inside dir
  * you can have "gcc", "clang", "ld" and "rtld" folders for complier-specific stuff outside of narrow C/C++ lang-only expertise


build2
  https://www.youtube.com/watch?v=cJP7SSLjvSI
  https://www.youtube.com/watch?v=Nni2Qu2WitY


SEE
  https://root.cern.ch/building-root

INFO
  READ General build problems
    https://electric-cloud.com/plugins/build-automation

  !!! Reproducible builds
    https://reproducible-builds.org/docs/stable-inputs/
    https://wiki.debian.org/ReproducibleBuilds
    http://bootstrappable.org/
    ++ https://linderud.dev/blog/reproducible-arch-linux-packages/

  Accepting Constraints in Build Systems – BEC Systems
    READ http://bec-systems.com/site/1462/accepting-constraints-in-build-systems

  Build version, Firmware version, and build-id hash matching
    2019-07-28 [X] https://interrupt.memfault.com/blog/gnu-build-id-for-firmware
    2019-07-28 [X] https://embeddedartistry.com/blog/2016/10/27/giving-you-build-a-version
    https://gitlab.com/wolframroesler/version
      http://pubs.opengroup.org/onlinepubs/9699919799/utilities/what.html

  Faster builds
    [_] CMP:READ: http://www.bitsnbites.eu/faster-c-builds/
    http://voices.canonical.com/jussi.pakkanen/2012/10/01/building-cc-what-really-happens-and-why-does-it-take-so-long/
    https://eklitzke.org/in-defense-of-c++
      https://news.ycombinator.com/item?id=13581960
    https://medium.com/@Coder_HarryLee/speeding-up-the-build-of-c-and-c-projects-453ce85dd0e1

  Configuration Management -- complete tools conveyor for C++
    +++ https://lefticus.gitbooks.io/cpp-best-practices/content/02-Use_the_Tools_Available.html


Rules for portable builds
  https://blog.gibson.sh/2017/11/26/creating-portable-linux-binaries/
