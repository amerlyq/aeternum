RQ
  * search existing dep (err if notfound)
    - prefix
    - system
  * build dep yourself
    - keep local build
      = reliable clean independent build
      ! NEED: always use required/preffered compiler for ext deps instead of currently used for CMake
        i.e. some ext-deps can't be built by clang
    - install into prefix (if available, error if not specified)
      + caching (improve build time)
      - BAD: inconsistency
  * use one of auto fallback strategies
  * choose options per each dep
  * configurations for set of options of all deps altogether
    - all local (jenkins release)
    - all searched (jenkins develop)
    - most cached but some only local (noob-friendly defaults)
    - switch strategies only for some components (partial update of deps)
  * ext deps as alien sources must be always built locally (they may frequently change)
    - provide option/strategy to force "cache everything" -- even such deps
      => ultimately necessary for massive rebuilds when refactoring (1 min -> 30 sec)
  * different compilers / toolchains


Lifetime (change frequency) / build time impact
  * new each time you press "make"
    => trigger build directly from inside CMake
    = remove by "make"
    + simple, robust, reliable
    --- slow and repetitive
  * per incremental build -- rebuild on reconfigure (on "cmake")
    => use ExternalProjects
    = remove by "make clean"
    -- make clean must not
  * per clean build -- rebuild on build dir recreation
    => use internal ./_build/_prefix
    + isolated for build
    = remove by "make distclean"
    - can't be shared
  * per session -- rebuild on demand when deps breaks
    ? how to rebuild automatically if revisions have changed ?
    ++ can be shared for multiple builds
    - still slow -- requires calling CMake of each ext-dep on each command (to check changes)
