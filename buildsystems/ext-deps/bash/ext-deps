#!/usr/bin/env bash
#%USAGE: to install all deps (everything in ./ext-deps.d/): $ ./ext-deps -iA
#%  * to disable some target-scripts completely -- remove "x" permission (chmod -x)
#%  * all target-scripts are parametrized by env vars
#%USAGE: install only choosen targets (better):
#%  $ ./$0 [-d /path/to/buildroot/dl] [-t /my/_prebuilt-prefix] [-i] [targets..]
#%USAGE: use ccache and another compiler
#%  $ CC=gcc-5 CXX=g++-5 PATH="/usr/lib/ccache/bin:/usr/lib/ccache:$PATH" ./$0 -iAt /my/_prebuilt-prefix
#%
#%USAGE:(for *single* target): pass args to target recept itself after "--"
#%  $ ./$0 target -- /path/to/.tar.gz -C ./cmake-config
#%ALT: use additional "--" to skip to positional arguments (only some targets)
#%  $ ./$0 target -- -C ./cmake-config
#%  $ ./$0 target -- -- positional_cmake_args -C ./cmake-config
#%ALSO: add indirect dependency on real files
#%  $ ./$0 -D ./config.h -D ./cmake-config -- target -- -- -C ./cmake-config
#%
set -euo pipefail -o errtrace
trap 'printf "%s:%s(): %s\n" "$LINENO" "${FUNCNAME-}" "${BASH_COMMAND-}"' ERR

d_swd=$(dirname "$(readlink -e "$0")")
d_recepts=$d_swd/ext-deps.d
d_pj=${d_swd%/*}
all_targets=0
force=0
choices=()
filedeps=()

export MAKEFLAGS="-j$(nproc)${MAKEFLAGS+ $MAKEFLAGS}"
#%WARN: after generating "/path/to/_prebuilt-prefix" you can't rename or move it
#%  => always build again -- because full paths to location are hardcoded in generated files
[[ ${PJ_PREFIX_DIR+x} ]] || export PJ_PREFIX_DIR=$d_pj/_prebuilt-prefix
[[ ${PJ_ROOT_DIR+x} ]]   || export PJ_ROOT_DIR=${d_pj%/*/*/*}
[[ ${PJ_SDK_DL_DIR+x} ]] || export PJ_SDK_DL_DIR=$PJ_ROOT_DIR/sdk/buildroot/dl
[[ ${PJ_MIRROR_GIT+x} ]] || export PJ_MIRROR_GIT='ssh://git@example.com:1234/pj_root'

#%
#%ATT: choices are executed in the order of cmdline flags
while getopts 'AcCd:fhilLRs:t:' o; do case $o in :|'?') exit 2
;; d) PJ_SDK_DL_DIR=$OPTARG       #% d:= download dir     (/path/to/sdk/buildroot/dl)
;; t) PJ_PREFIX_DIR=$OPTARG       #% t:= destdir pref     (/home/user/_prebuilt-prefix)
;; s) d_recepts=$OPTARG           #% s:= target recepts   (/repo/scripts/ext-deps.d/)
;; D) filedeps+=( "$OPTARG" )     #% D:+ additional dependency files to check timestamps
;; A) all_targets=1               #% A = install all targets instead of list on cmdline
;; f) force=1                     #% f = force rebuild of choosen targets (ignore timestamps)
;; h) choices+=(Help)             #% h = help
;; l) choices+=(ListDeps)         #% l = list available targets
;; L) choices+=(ListInstalled)    #% L = list installed targets
;; i) choices+=(InstallDeps)      #% i = install targets listed on cmdline
;; c) choices+=(FindIncomplete)   #% c = list incomplete cached builds in /tmp
;; C) choices+=(CleanIncomplete)  #% C = clean incomplete cached builds in /tmp
;; R) choices+=(RemoveInstalled)  #% R = remove all installed targets (content of PJ_PREFIX_DIR)
esac; done; shift $((OPTIND-1))
((${#choices[@]})) || { (($#)) && choices=(InstallDeps) || choices=(Help); }

############################################################

assert_targets(){ for k; do assert_has_key 'recepts' "$k"; done; }
assert_has_key(){ declare -rn a=$1; local k=$2
  [[ ${a[$k]+x} ]] && return 0
  echo "Err: no such target '$k'"
  echo "Inf: available targets from '${!a}':"
  printf '  %s\n' "${!a[@]}" | sort -n
  exit 2
}
assert_func(){ local fn=$1 funcs
  funcs=$(declare -F | awk '$3~/^[A-Z]/{print$3}')
  grep -qxF "$fn" <<< "$funcs" && return
  echo "Err: wrong function-choice '$fn'"
  sed 's/^/  /' <<< "$funcs" | sort -n
  exit 2
}

array_filter_by(){ declare -rn a=$1; shift
  readarray -t a < <(IFS=$'\n'; grep -xFf <(printf '%s\n' "$@") <<< "${a[*]}" || true)
}

# NOTE: add independent targs to end to fail on implicit dependency earlier
array_extend_uniq(){ declare -rn a=$1; shift
  readarray -t a < <(IFS=$'\n'; awk '!a[$0]++' <<< "${a[*]}"$'\n'"$*")
}

find_recepts(){ declare -gA "$1"; declare -rn a=$1; local p=$2
  p=$(find "$p" -type f -executable -printf '%p\n')
  [[ ${p:+x} ]] || return 2
  while IFS= read -r p; do k=${p##*/}
    [[ ${a[$k]+x} ]] && { echo "Err: repeated script name '$k'"; return 2; }
    a[$k]=$p
  done <<< "$p"
}

extract_prerequisites(){ (($#)) || return 2
  awk -vm='^#@deps:\\s*' -vOFS=$'\t' -- '
  /^[^#]/ {nextfile}
  $1~m {
    sub(".*/","",FILENAME); sub(m,"",$0)
    for(i=1;i<=NF;++i) print FILENAME,$i
  }' "$@"
}

# NOTE: topological sort for inter-dependency graph: [pairs = (a "requires" b)]
topological_order(){ declare -rn a=$1; shift
  deps=$(extract_prerequisites "$@" | tsort | tac)
  readarray -t a < <(printf '%s' "$deps")
  assert_targets "${a[@]}"
}

# BAD:($@): only physical files supported
#   => git/http links will result in update each time
uptodate_with_all(){ local m=$1; shift
  for f; do [[ $m -ot $f ]] && return 1; done; return 0
}

# NOTE: store "hash" beforehand to detect script changes during subsequent script execution
# INFO: you can supply per-target args from some ref vars or associative array
# BAD:(no args): prerequisites are embedded into scripts to make scripts self-sufficient
#   => timestamps aren't checked when using such implicit default args (i.e. no args)
# BUT! using only script's hashsum is enough (even w/o script's timestamp)
#   * upgrade of pkg will require to update script to change ver. number in filename
make_target(){ local hsum marker=$1 script=$2; shift 2
  hsum=$(sed -r '/^\s*(#|$)/d' "$script" | sha256sum)
  hsum+=$'\n'$(printf '%s\n' "${filedeps[@]}" | sha256sum)
  hsum+=$'\n'$(printf '%s\n' "${cmdline_args[@]}" | sha256sum)

  ((!force)) \
    && uptodate_with_all "$marker" "${filedeps[@]}" \
    && cmp -s "$marker" <(printf '%s\n' "$hsum") \
    && return 0

  "$script" "${cmdline_args[@]}" || exit $?
  printf '%s\n' "$hsum" > "$marker"
}

make_targets(){ mkdir -p "$PJ_PREFIX_DIR"
  for t; do make_target "$PJ_PREFIX_DIR/._$t" "${recepts[$t]}"; done
}

############################################################

Help(){ sed -rn '1d;/^(.*\s)?#%/s///p' "$0"; }
FindIncomplete(){ find "$(dirname $(mktemp -ud))" -type d -name "${0##*/}@*~*" "$@"; }
CleanIncomplete(){ FindIncomplete -print -exec rm -vrf {} '+'; }
RemoveInstalled(){ [[ $PJ_PREFIX_DIR != / ]] && find -H "$PJ_PREFIX_DIR" -mindepth 1 -delete; }
ListInstalled(){ find "$PJ_PREFIX_DIR" -maxdepth 1 -type f -name '._*' -printf '%P\n' | cut -c3-; }
InstallDeps(){ make_targets ${ordered_targets[@]:+"${ordered_targets[@]}"}; }
ListDeps(){
  echo "Inf: available targets:"
  printf '  %s\n' "${!recepts[@]}" | sort -n
  echo
  echo "Inf: deps to be installed:"
  printf '  %s\n' ${ordered_targets[@]:+"${ordered_targets[@]}"}
}

_main(){ declare -ga ordered_targets
  find_recepts 'recepts' "$d_recepts"
  topological_order 'ordered_targets' "${recepts[@]}"
  array_extend_uniq 'ordered_targets' "${!recepts[@]}"

  assert_targets "$@"
  if (($#)) || ((!all_targets)); then
    array_filter_by 'ordered_targets' "$@"
  fi

  for c in "${choices[@]}"; do
    assert_func "$c"
    "$c"
  done
}

# ATT: due to getopts you need two double hypen for solitary "cmdline_args" $ ./$0 -- -- ...
for((i=1;i<=$#;++i)); do [[ ${!i} == -- ]] && break; done
cmdline_args=( "${@:i+1}" )
_main "${@:1:i-1}"
