One-liners collection
  http://www.softpanorama.org/Scripting/Perlorama/perl_in_command_line.shtml#More_on_emulation_of_Unix_cut
  !! READ: Tricks for one-liners
    https://blogs.oracle.com/ksplice/entry/the_top_10_tricks_of
  Strict warnings
    $ perl -Mstrict -Mautodie -M5.024 -Mwarnings=FATAL,all -lae '..'
      WARN: -w != use warnings
        https://perlmaven.com/always-use-strict-and-use-warnings
      WARN: memleak for warnings FATAL in <v0.9907
        https://rt.cpan.org/Public/Bug/Display.html?id=81294
  Pass variables
    $ perl -wslne 'print if /$patt/ && $yes' -- -patt="$d" -yes

MAN
  All flags
    DEMO: https://habr.com/en/post/70610/
      => how to understand flags for oneliners
    $ perldoc perlrun
    -a => -n | split into @F
    -F => -a | field delimiter
    -l / -l0 | line-ending processing
    -s | pass args to perl oneliner BAD:(-w): spurious warnings
  Help on func
    $ perldoc -f read
  if you use B::Deparse, you can see what it means (for most things)
    $ perl -MO=Deparse   -p  -e 1
    SEE http://perldoc.perl.org/functions/pack.html

Choose digit column
  $ perl -ne '/Node\[(\d+)/ && print $1."\n"'

Sort words in one line
  $ perl -ne '$,=" ";print sort split /\s+/'

Join all lines
  $ perl -pe'chomp, s/$/,/ unless eof'
  $ perl '-peeof||s|$/$|,|'
  $ perl -l54 -pe 'eof and $\=""'

Split by 4 little bytes
# read FH, $temp, 12;
# ($a,$b)=unpack("N2", substr($temp,0,8));
  BAD:(\n): $ perl -lne 'binmode(STDIN); printf "0x%08lx\n",unpack("N", $_)' ./pgtdump
  $ perl -We 'while(read(STDIN,$buf,4)){printf "0x%08lx\n",unpack("L", $buf)}'


Toggle debug by signals (if enabled from cmdline)
  my $debug = 0;
  $debug += scalar grep ( "-d", @ARGV );
  $SIG{'USR1'} = { $debug++ };
  $SIG{'USR2'} = { $debug-- };


Different return value based on type
  sub { ...; wantarray ? ($a, $b) : $a; }

Cast anything to bool
  REF: https://stackoverflow.com/questions/32261602/perl-how-to-force-boolean-to-0-1
  | my $flag = !!$ENV{LINE_BUFFERED}  # => {1, ""}

Read pairs of key-value
  while (my ($k, $v) = each %rel_addr) {
    if ( $v eq 'failed' ) {$failed_s{$k} = $v};
  };
