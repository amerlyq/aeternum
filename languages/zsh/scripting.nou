DEBUG
  HELP: zsh:$ autoload +X zargs; cat $functions_source[zargs]
    SRC: http://www.zsh.org/mla/workers/2019/msg00135.html


%% Autoload functions

  +++ How to define and load your own shell function in zsh - Unix & Linux Stack Exchange ⌇⡞⡂⡆⢪
    https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
    * $fpath is not recursive -- add all folders with function files yourself
    * you must register func-file yourself $ autoload -Uz hello
      NOTE: it creates stub function :: $ which hello $ ::: hello() { #undefined builtin autoload -XU }
      [_] FIND: maybe some shebang like "#compdef hello" is supported
    * simple -- whole script body becomes function body and is executed as whole each time on call
    * multifunc -- main function must have the same name as func-file
      ! all defined functions will be visible in global namespace (pollute it)
      ! call main func at the end of file yourself -- otherwise first autoload call will do nothing beside define

  HACK: lazy-load every file from your private folder
    How to define and load your own shell function in zsh - Unix & Linux Stack Exchange ⌇⡞⡂⡋⡦
      https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh/526429#526429
      zsh:$ autoload -Uz $fpath[0]/*(.:t)
      # print -lDaC2 ${(kv)functions_source}  # DEBUG=WARN: lazy fns have empty path

  [_] TODO: study "autoload -w" effects -- loading of all of funcs from READ:(zcompile/zmodload) files


%% Completion

  Z-Shell completion system introduction ⌇⡞⡂⡊⠑
    http://bewatermyfriend.org/p/2012/003/

  e.g. zsh / Code / [803746] /Completion/Unix/Command/_tmux ⌇⡞⡂⡊⠪
    https://sourceforge.net/p/zsh/code/ci/master/tree/Completion/Unix/Command/_tmux


%% Anonymous one-shot functions

  shell script - Local variables in zsh: what is the equivalent of bash's "export -n" in zsh - Unix & Linux Stack Exchange ⌇⡞⡂⡎⡶
    https://unix.stackexchange.com/questions/111225/local-variables-in-zsh-what-is-the-equivalent-of-bashs-export-n-in-zsh

  Re: Local inner functions ⌇⡞⡒⣮⠡
    https://www.zsh.org/mla/users/2011/msg00207.html


%% Scripting guide

  TUT array ⌇⡞⡂⡓⠜
    http://zdharma.org/Zsh-100-Commits-Club/Zsh-Native-Scripting-Handbook.html#searching-arrays


%%% Matching glob/regex
  regular expression - Does bash support back references in parameter expansion? - Unix & Linux Stack Exchange ⌇⡞⡛⣳⠁
    https://unix.stackexchange.com/questions/361134/does-bash-support-back-references-in-parameter-expansion


%% Positional array
  Prepend: Re: array prepend ⌇⡞⡂⡉⡰
    https://www.zsh.org/mla/users/2013/msg00046.html
    BET: zsh:$ fpath[1,0]=($lib)
    STD: zsh:$ fpath=( $lib $fpath )
    ALSO: zsh:$ typeset -T LD_LIBRARY_PATH ld_library_path :
    # print -l $fpath  # DEBUG=

  Surround: bash - How can I prepend and append to each member of an array? - Unix & Linux Stack Exchange ⌇⡞⡒⢪⠡
    https://unix.stackexchange.com/questions/205170/how-can-i-prepend-and-append-to-each-member-of-an-array
    zsh:$ b=('foo '${^a}' bar')
    zsh:$ printf '<%s>\n' ${a//(#m)*/foo $MATCH bar}
    zsh:$ b=(); printf -v b 'foo %s bar' "$a[@]"

  Null-delimited
    zsh:$ print -rNC1 -- "$list[@]"


%% Associative arrays

  OFF:(5.4.2): A User's Guide to the Z-Shell ⌇⡞⡌⠰⢡
    http://zsh.sourceforge.net/Guide/zshguide05.html#l122

  Re: Associative Arrays ⌇⡞⡌⠮⡐
    2020-02-18 [X] https://www.zsh.org/mla/users/2004/msg01096.html
    Assign
      zsh:$ : ${(AA)=a::=foo bar}
      zsh:$ : ${(AA)=a:=foo bar}
    Serializing by double-quoting
      zsh:$ "${${(@qqkv)A}[*]}"
      zsh:$ typeset -A local_hash=("${(Q@)${(z)1}}")

  Pretty-print
    golfing
      zsh:$ print -lraC2 -- "${(@kv)aa}" | sort
        NOTE:(sort): no easy way to sort by key :: BAD: ${(@aokv)opts}
      zsh:$ for k v ("${(@kv)opts}") print -r -- $k $v
    BAD:(unsorted):
      zsh:$ typeset -A a=(zzz 1 yy 2 x 3); print -- ${(kv)a[(I)(${(okj:|:)a})]}
    BAD:(multiline):
      zsh:$ typeset -A a=(zzz 1 yy 2 x 3); b=( ${(ok)a} ); for c in $b; do echo $c $a[$c]; done
      zsh:$ typeset -A a=(zzz 1 yy 2 x 3); printf '%s := %s\n' "${(@kv)a}"
      zsh:$ typeset -A a=(zzz 1 yy 2 x 3); () { for 1; print -lraC2 -- $1 ${a[$1]} } ${(ko)a}
    MAYBE we can expand key-value, quote each pair, sort as simple array, and unquote, but I got syntax errors on this agenda

  Re: How to iterate over an array of associative arrays ⌇⡞⡌⠰⡪
    https://www.zsh.org/mla/users/2013/msg00350.html
  Iterating over keys (or k/v pairs) in zsh associative array? - Super User ⌇⡞⡌⠰⢏
    https://superuser.com/questions/737350/iterating-over-keys-or-k-v-pairs-in-zsh-associative-array

  Multiple subscriptions / items
    WARN: keys pattern-matching is unordered -- i.a. no effect from sorting keys
    zsh:$ typeset -A a=(x 1 y 2 z 3); echo ${(v)a[(I)(x|y)]}
    OR:(indirect): zsh:$ typeset -A a=(x 1 y 2 z 3); b=a; echo ${(v)${(P)b}[(I)(x|y)]}


%%% Expansions
  Indirect assign
    zsh:$ : ${(P)a::=(foo ${(P)a})}
      BAD: scalar parameter 'a_var' set in enclosing scope in function
      BAD? SECU?
    zsh:$ typeset -g "$var"=value
    zsh:$ typeset -g "${A}[key]"=value
    zsh:$ eval "typeset -ga $nm"'=("$array[@]")'
    zsh:$ ... | read -r -- "${A}[${(@)^keys}]"

  Workaround var-inside-var double expansion
    zsh:$ print ${${:-=cat}:h}
    zsh:$ print ${(j., .)${:-${^words}yeah}}
    zsh:$ print ${(j., .)${:-{foo,bar,baz}yeah}}

  Crop name to max-sz (together with trail) :: abc…+4
    zsh:$ (){ local sz=6 rest nm=$1 && (( (rest=$#nm - sz) > 0)) && nm=${nm:0:(sz-$#rest-2)}…+$((rest+2)) && print $nm } abcdefgh

  Extract composed extension
    BAD:(:r): "f..." => ".."
    zsh:$ for a in ${(z):-f d/f d/. d/.. .. f. f.. d/.h .h d/.h.gz d/f.tar.gz f.c s.verylongextension}; do print "$a" ${${${ext::=${${${a:t}#.}:(-16)}}#$ext:r:r}#.}; done | column -tR1

  Extract [group-]feature-type designators ※⡞⡚⣰⡋
    ./group/…/group/feature/type/null = always two rightmost dirs
      zsh:$ for a in ${(z):-n ./n f/ f/n ./f/n f/t/n f/t/ g/f/t/n g/f/ g/f/n s/g/f/t/n s/g/f/}; do print $a ${${${:-$a.}#${${:-$a.}:h:h:h}/}:h}; done | column -tR1
      BAD: not supported nested folders inside feature
      NEED: each feature is small enough to never need nested folders
    ./group./…/group./feature/type/null = always two rightmost dirs BAD: same problems
      zsh:$ for a in ${(z):-n ./n f/ f/n ./f/n f/t/n f/t/ g/f/t/n g/f/ g/f/n s/g/f/t/n s/g/f/ g./ g./n g./f/n g./f/t/n s./g./n s./g./f/n s./g./f/t/n}; do print $a ${${${${ft::=${${${:-$a.}#${${:-$a.}:h:h:h}/}:h}/}##*./}:-$ft}%/}; done | column -tR1
        NOTE: can be simplified by using "${a:t3}" -- keep 3 tail component instead of manual cropping like I did
          zsh:$ print ${a::=$a.} ${${${a:t3:h}##*./}:-${a:t3:h}}
          OR:(even): zsh:$ print ${a::=$a.} ${${a:t3:h}##*./}
    ./group./…/group./feature/type/ctx/…/ctx/null = extract two leftmost dirs "[feature] type" after group
      zsh:$ for a in ${(z):-n ./n ././n ./../n f/ f/n ./f/n ../../f/n f/t/ f/t/n ../f/t/n f/t/c/n ./f/t/c/n f/t/c/s/n n. ./n. g./ ./g./ g./n g./f/n g./f/t/n s./g./n s./g./f/n s./g./f/t/n s./g./f/t/c/n g./f/t/c/G./F/T/n}; do print ${${a::=$a.}%.} ${${ft::=${${a:h}##*./}}:h2} ${${${${a:h}%$ft}%/}:-.}; done | column -tR1,3
        OR:(reordered): zsh:$ print ${${a::=$a.}%.} ${${${${a:h}%${ft::=${${a:h}##*./}}}%/}:-.} ${ft:h2}; done | column -tR1,2
        BAD: does not support "_foreign" folders -- they must always be treated as "type"
    ./group./_foreign/ctx/null = BET
      zsh:$ for a in ${(z):-n ./n ././n ./../n f/ f/n ./f/n ../../f/n f/t/ f/t/n ../f/t/n f/t/c/n ./f/t/c/n f/t/c/s/n n. ./n. g./ ./g./ g./n g./f/n g./f/t/n s./g./n s./g./f/n s./g./f/t/n s./g./f/t/c/n g./f/t/c/G./F/T/n _t _t/n ./_t ./_t/ f/_t/ ./f/_t/n g./_t/n s./g./_t/_t/}; do print $a /${a::=${${${:-/${${:-$a.}:h}}%%/_*}#/}} ${${${a%${a##*./}}%/}:-.} ${(s:/:)${${${a##*./}:h2}:-.}}; done | column -tR1,3
        NICE: drops "_foreign" folders BAD: always empty "type" (must be "_foreign")
