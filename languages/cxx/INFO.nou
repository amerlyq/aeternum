UGLY -- your C++ is shit
  syntax - Is C++ context-free or context-sensitive? - Stack Overflow
    https://stackoverflow.com/questions/14589346/is-c-context-free-or-context-sensitive/14589567#14589567
  CppCon 2019: Patrice Roy “Some Programming Myths Revisited” - YouTube
    https://www.youtube.com/watch?v=KNqRjzSlUVo
  CppCon 2019: Nicolai Josuttis “When C++ Style Guides Contradict” - YouTube
    https://www.youtube.com/watch?v=WRQ1xqYBKgc


%%%% C++11
  Regex
    http://en.cppreference.com/w/cpp/regex/ecmascript

  FAQ
    http://c-faq.com/
      http://c-faq.com/osdep/cbreak.html

  Bestiary
    ++ http://videocortex.io/2017/Bestiary/

  Guideline
    https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f16-for-in-parameters-pass-cheaply-copied-types-by-value-and-others-by-reference-to-const
    Consistent naming practices
      https://github.com/tvaneerd/isocpp/blob/master/on_naming.md
        <= https://www.fluentcpp.com/2018/05/29/a-concrete-example-of-naming-consistency/
    Use =default or not
      https://www.fluentcpp.com/2019/04/23/the-rule-of-zero-zero-constructor-zero-calorie/
    [_] READ: mutex/locks
      https://www.fluentcpp.com/2019/04/26/how-to-write-safe-and-expressive-multi-threaded-code-in-cpp11/

  Anonymous namespace vs static
    http://www.comeaucomputing.com/techtalk/#nostatic
    https://stackoverflow.com/questions/4181059/linkage-of-symbols-within-anonymous-namespace-within-a-regular-namespace
      https://stackoverflow.com/questions/4977252/why-an-unnamed-namespace-is-a-superior-alternative-to-static
      https://stackoverflow.com/questions/11016220/what-are-inline-namespaces-for
      https://stackoverflow.com/questions/5780918/hiding-a-c-class-in-a-header-without-using-the-unnamed-namespace
    CHECK: hiding symbols with "-fwhole-program or -flto"
      https://stackoverflow.com/questions/18932237/c-inline-keyword-and-compiler-optimization
      https://kristerw.blogspot.com/2017/05/interprocedural-optimization-in-gcc.html
        -fwhole-program makes all functions local to the translation unit, unless you explicitly tell the compiler they are externally visible.

  Passing vars -- shared_ptr vs const ref
    https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/

  virtual methods / vtable optimization (redundancy)
    http://lazarenko.me/devirtualization/

  Understanding vtables
    https://pabloariasal.github.io/2017/06/10/understanding-virtual-tables/

  Undefined behavior
    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html
    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html


Nightmares
  Software disenchantment @ tonsky.me
    https://tonsky.me/blog/disenchantment/
    TALK: https://www.reddit.com/r/programming/comments/eipb5c/software_disenchantment/
  CppCon 2018: Nicolai Josuttis “The Nightmare of Initialization in C++”
    https://www.youtube.com/watch?v=7DTlWPgX6zs
  CppCon 2018: Richard Powell “How to Argue(ment)"
    https://www.youtube.com/watch?v=ZbVCGCy3mGQ
  Templates -- compile time is important for maintenance
    https://habr.com/ru/company/jugru/blog/438260/
    Evolution: C -> C++ -> C++ STL -> C++ -> C
      https://twitter.com/ChristerEricson/status/1078095388244996096
        Goal of programmers is to ship, on time, on budget. It’s not “to
        produce code.” IMO most modern C++ proponents 1) overassign importance
        to source code over 2) compile times, debugability, cognitive load for
        new concepts and extra complexity, project needs, etc. 2 is what matters.
  strict aliasing
    https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8
    https://habr.com/ru/post/114117/
    https://blog.regehr.org/archives/1307
  volatile
    = passing exec(std::atomic<bool> const& isCancelled) is OK and "volatile" is unnecessary
      ::: memory barriers before atomic.read() will ensure var will be in sync
        https://en.cppreference.com/w/cpp/atomic/memory_order
        SEE: modification order
      ::: OR:BET? pass functor isCancelled() -- no troubles about memory ordering, etc.
       | auto const& num = m_NumPendingTasks;
       | auto const isCancelled = [&num](){ return num > 0; }
       | exec(std::function<bool()> const& isCancelled)
        !! ensure lifespan of lambda/tasks is less then lifespan of "this" -- othewise use std::shared_from_this()
        * threads always copy code -- no sense to make "const&"
        * mutable data inside const ref classes still can be changed (side effects will be propagated back)
    volatile isn't atomic
      https://componenthouse.com/2016/10/21/a-note-about-the-volatile-keyword-in-cpp/
      ++ https://habr.com/ru/post/328362/
        SEE: table of 5 main distinctions
    volatile will be removed from future C
      https://www.youtube.com/watch?v=xkshva7DKfQ
    volatile only for "unusual" memory i.e. same location at different addresses
      http://www.drdobbs.com/parallel/volatile-vs-volatile/212701484
  default zero-init of class objects
    ::: must always initialize by `a = {}` or `a{}`
    https://en.cppreference.com/w/cpp/language/value_initialization
      SEE: Explanation (1-4) in table
    https://en.cppreference.com/w/cpp/language/default_initialization
      SEE: Explanation (3) + effects directly below
  structure fields initialization
    +++ https://d3s.mff.cuni.cz/legacy/~holub/c_features.html
  2017: std::visit is everything wrong with modern C++
    https://bitbashing.io/std-visit.html
  2018: std::variant Doesn’t Let Me Sleep | Pablo Arias
    https://pabloariasal.github.io/2018/06/26/std-variant/


TALK
  079 Design Patterns in Functional programming by Scott Wlaschin
    https://youtu.be/X_WcbyQ19YM
  GOTO 2018 • Unconditional Code • Michael Feathers
    https://youtu.be/AnZ0uTOerUI
  GOTO 2018 • Don't Walk Away from Complexity, Run • Venkat Subramaniam
    https://youtu.be/4MEKu2TcEHM
  Declarative Thinking, Declarative Practice - Kevlin Henney [ ACCU 2016 ]
    https://youtu.be/nrVIlhtoE3Y
  YOW! 2013 Kevlin Henney - The SOLID Design Principles Deconstructed
    https://youtu.be/tMW08JkFrBA
  C++Now 2019: Vittorio Romeo “Higher-order functions and `function_ref`”
    https://www.youtube.com/watch?v=5V74RPUEu5s
  10 Techniques to Understand Code You Don’t Know - Jonathan Boccara [ACCU 2019]
    https://www.youtube.com/watch?v=tOOK-VsWU-I
  GOTO 2017 • Code as Risk • Kevlin Henney
    https://www.youtube.com/watch?v=YyhfK-aBo-Y
     SEE: many others from him -- small is beautiful, error of our ways, etc
  Kevlin Henney - Functional C++
    https://www.youtube.com/watch?v=CIg6eyJv4dk
  CppCon 2018: Serge Guelton “Frozen data structures in C++14”
    https://www.youtube.com/watch?v=vA5sdxbwUG8
  CppCon 2018: Patrice Roy “Pessimistic Programming”
    https://www.youtube.com/watch?v=pnSvUbE1HHk
  +++ [_] CppCon 2016: David Sankel “Building Software Capital: How to write the highest quality code and why"
    https://www.youtube.com/watch?v=ta3S8CRN2TM
  [_] pointers vs references (guideline)
    https://www.fluentcpp.com/2018/10/02/pointers-references-optional-references-cpp/
  [_] The next big Thing - Andrei Alexandrescu - Meeting C++ 2018 Opening Keynote
    https://www.youtube.com/watch?v=tcyb1lpEHm0
      = see his vision
  [_] SEE Inheritance and operator=()
    https://www.youtube.com/watch?v=QGcVXgEVMJg
  [_] CppCon 2015: Andrei Alexandrescu “Declarative Control Flow"
    https://www.youtube.com/watch?v=WjTrfoiB0MQ
      https://github.com/cppcon/cppcon2015
  [_] CppCon: async IO
    https://www.youtube.com/watch?v=2UC6_rfJuAw
  [_] SEE: using Templates in C++
    https://www.youtube.com/watch?v=UQf488GQXlY&feature=push-u-sub&attr_tag=FZvJmp5IiTFNGmZR-6
  [_] SEE: mighty UTF-8
    https://www.youtube.com/watch?v=ysh2B6ZgNXk&t=2670s
  [_] CppCon 2017: Anastasia Kazakova “Tools from the C++ eco-system to save a leg”
    https://www.youtube.com/watch?v=30r_SsOjg2E
  [_] Raymond Hettinger - Beyond PEP 8 -- Best practices for beautiful intelligible code - PyCon 2015
    https://www.youtube.com/watch?v=wf-BqAjZb8M
  [_] Scott Meyers – The Most Important Design Guideline
    https://www.youtube.com/watch?v=5tg1ONG18H8
  [_] CppCon 2017: Vinnie Falco “Make Classes Great Again! (Using Concepts for Customization Points)”
    https://www.youtube.com/watch?v=WsUnnYEKPnI&feature=youtu.be
  [_] std::async is BAD
    = std::async one of the worst function in the modern C++
    https://bartoszmilewski.com/2011/10/10/async-tasks-in-c11-not-quite-there-yet/
    ALSO: Effective Modern C++ by Scott Myers
  [_] About lambdas
    https://www.youtube.com/watch?v=WXeu4fj3zOs
  [_] Exception
    https://channel9.msdn.com/Events/CPP/C-PP-Con-2014/016-Exception-Safe-Code-Part-I
    https://channel9.msdn.com/Events/CPP/C-PP-Con-2014/023-Exception-Safe-Code-Part-II
    https://channel9.msdn.com/Events/CPP/C-PP-Con-2014/026-Exception-Safe-Code-Part-III
    ++ https://www.youtube.com/watch?v=GC4cp4U2f2E
    ++ https://www.youtube.com/watch?v=LfRLQ7IChtg&list=WL&index=48&t=0s
    +++ https://akrzemi1.wordpress.com/2011/10/05/using-stdterminate/
      https://akrzemi1.wordpress.com/2011/09/28/who-calls-stdterminate/
  [_] CppCon 2017: Hartmut Kaiser “The Asynchronous C++ Parallel Programming Model”
    https://youtu.be/js-e8xAMd1s
  READ
    [_] https://blog.jetbrains.com/clion/2017/11/towards-a-more-powerful-and-simpler-cpp-with-herb-sutter/
    [_] http://www.sqlite.org/isolation.html
    Code Review
      https://m.habrahabr.ru/post/340550/
      https://m.habrahabr.ru/post/342244/
  TRY (c) smil3y0u
    [_] https://github.com/cisco/openh264
  [_] NULL existence is worst mistake in CS ever
    https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/
  CMP непонятный код у новичков vs тупой код у опытных
    https://habrahabr.ru/post/347166/
    https://habrahabr.ru/post/349336/
  CppCon 2018: Bjarne Stroustrup “Concepts: The Future of Generic Programming (the future is here)”
    https://www.youtube.com/watch?v=HddFGPTAmtU&feature=youtu.be
  CppCon 2018: Kris Jusiak “State Machines Battlefield - Naive vs STL vs Boost”
    https://www.youtube.com/watch?v=yZVby-PuXM0
  What do you do when your Codebase is Old Enough to Vote
    https://www.youtube.com/watch?v=hCi8oZWL1js&feature=youtu.be
  CppCon 2016: Nicholas Ormrod “The strange details of std::string at Facebook"
    https://www.youtube.com/watch?v=kPR8h4-qZdk
  Refactoring to Immutability - Kevlin Henney
    https://www.youtube.com/watch?v=APUCMSPiNh4
    NICE: immutable datastructs && filters / pipelines
  CppCon 2019: Bjarne Stroustrup “C++20: C++ at 40” - YouTube
    https://www.youtube.com/watch?v=u_ij0YNkFUs&feature=youtu.be
  CppCon 2019: Sean Parent “Better Code: Relationships” - YouTube
    https://www.youtube.com/watch?v=ejF6qqohp3M&feature=youtu.be
  +++ CppCon 2019: Andrei Alexandrescu “Speed Is Found In The Minds of People" - YouTube
    https://www.youtube.com/watch?v=FJJTYQYB1JQ
  CppCon 2019: Herb Sutter “De-fragmenting C++: Making Exceptions and RTTI More Affordable and Usable” - YouTube
    https://www.youtube.com/watch?v=ARYP83yNAWk&feature=youtu.be
  C++ virtual methods racing in base class ctor/dtor  -- debugging by santizers
    https://channel9.msdn.com/Events/GoingNative/2013/The-Care-and-Feeding-of-C-s-Dragons
  CppCon 2019: Andrew Sutton “Reflections: Compile-time Introspection of Source Code” - YouTube
    https://www.youtube.com/watch?v=ARxj3dfF_h0
  CppCon 2019: Kate Gregory “Naming is Hard: Let's Do Better” - YouTube
    https://www.youtube.com/watch?v=MBRoCdtZOYg
  The most valuable values - Juanpe Bolívar - Meeting C++ 2017 - YouTube
    https://www.youtube.com/watch?v=NMol_5-2owo
    +++ https://pabloariasal.github.io/2018/06/26/std-variant/
 2022-01-17-Mon-W03
  [⪡⡊⡭] READ: Как мы избавились от 80% своего кода, повысив скорость разработки и уменьшив количество ошибок / Хабр ⌇⡡⣥⢀⠢
    https://habr.com/ru/company/mvideo/blog/599401/
    = Насчет SOLID=bullshit :: тут тоже на single responcibility накатили.
    да и на TDD тоже. Ну это так, на подумать. Я бы тут с авторами
    подискутировал, на тему делам SOLID, но и про KISS не забываем. ну и про
    то, что API тестирование - это не серебряная пуля. Но в целом статья мне понравилась.
  [_] VREC: Law of Demeter: A Practical Guide to Loose Coupling - Kris Jusiak - CppCon 2021
    https://youtu.be/QZkVpZlbM4U
    Довольно практичная и легкая лекция про S&D из SOLID. Должна быть понятна не только плюсовикам. тут мало плюсовщины.
  [_] VREC: Type-and-resource Safety in Modern C++ - Bjarne Stroustrup - CppCon 2021 - YouTube ⌇⡡⣥⢊⣥
    https://www.youtube.com/watch?v=l3rvjWfBzZI
    теперь и в с++ будет куча анотаций и не анотаций
    из раста(или чего еще) предлагает [[trusted]]
    ток в расте  помечаешь его как unsafe


DEBUG
  Show #include (module *.c) relpath "" -> gcc impl-defined <>
    $ cpp -v /dev/null -o /dev/null
    WARN! srcs are searched in same order as -I => can't override by later flags
    $ cpp -I/tmp -I/var -iquote /home -v /dev/null -o /dev/null
      ALSO: -isystem -nostdinc
    ATT: q-include "" is searched relative to "currently processed" *.h / *.cpp, NOT pwd
      REF: https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html
      TUT: http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art026
      https://stackoverflow.com/questions/3162030/difference-between-angle-bracket-and-double-quotes-while-including-heade
  Print lib path which will be used
    $ gcc -print-file-name=libc.a
    OR $ gcc -print-libgcc-file-name
       # to link manually when using -nostdlib
  Investigate intermediate files
    $ gcc -save-temps ...
  Check paths to includes and libs to link
    $ gcc -H -v -print-search-dirs -o main main.c
    ALT: $ gcc -### ...
  Trace linker libs
    $ gcc -Wl,--trace main.c -o main -L. -lmylib
  Profiling compile time
    $ g++ -v -ftime-report
  Profiling for templates (time/memory)
    https://github.com/mikael-s-persson/templight
    https://danielleamethyst.org/work_blog/templates/


%% Snippets
  |aur/templight-git|
  |aur/templight-tools-git|
    https://github.com/mikael-s-persson/templight
    http://www.geonius.com/software/index.html#libgpl


%%% GCC
  GCC6
    https://gcc.gnu.org/gcc-6/changes.html
    https://gcc.gnu.org/gcc-6/porting_to.html
  Performance optimizations
    ++ http://stackoverflow.com/questions/14492436/g-optimization-beyond-o3-ofast

%%% General
  +++ Structure padding and alignment (low-level)
    http://www.catb.org/esr/structure-packing/
  ++ Placement New, Memory Dumps, and Alignment
    http://jrruethe.github.io/blog/2015/08/23/placement-new/
  !! Efficient argument passing in C++11
    http://www.codesynthesis.com/~boris/blog/2012/06/19/efficient-argument-passing-cxx11-part1/
  ++ Алёна C++ :: Приведение типов в C++
    http://alenacpp.blogspot.com/2005/08/c.html
  !! Mixing PIC/PIE with non-PIC == BAD
    http://stackoverflow.com/questions/8331456/mixing-pic-and-non-pic-objects-in-a-shared-library
    REF http://stackoverflow.com/questions/18026333/what-does-compiling-with-pic-dwith-pic-with-pic-actually-do
  ++ Linkers
    REF
      http://www.lurklurk.org/linkers/linkers.html
      Tut: +++ https://www.embeddedrelated.com/showarticle/900.php
    Linking Order of Libraries
      http://stackoverflow.com/questions/45135/why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc
  EOF
    https://latedev.wordpress.com/2012/12/04/all-about-eof/

%%% Standart
  Static (singleton) destruction
  https://sourcemaking.com/design_patterns/to_kill_a_singleton
    REF http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm#Destruction
    REF http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3338.html
        http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf
      # exactly after C++11 (and free)
    https://www.youtube.com/watch?v=c1gO9aB9nbs&feature=youtu.be&t=18m40s
    http://en.cppreference.com/w/cpp/utility/program/exit
  ALT:(singletons): use signals
    https://www.fluentcpp.com/2018/03/06/issues-singletons-signals/

%%% Inheritance
  # для обычных полей ( не вирт и не конструкторы )
        / pub | pro | pri
  | pub | pub | pro | pri
  | pro | pro | pro | ina
  | pri | pri | pri | ina

%%% Embedding data into ELF verbatim
  + http://stackoverflow.com/questions/4864866/c-c-with-gcc-statically-add-resource-files-to-executable-library
  http://stackoverflow.com/questions/19169039/symbol-names-when-embedding-data-in-executable-on-linux
  + http://gareus.org/wiki/embedding_resources_in_executables
  http://stackoverflow.com/questions/4158900/embedding-resources-in-executable-using-gcc/4158997#4158997
  http://www.linuxjournal.com/content/embedding-file-executable-aka-hello-world-version-5967


Online compilers
  https://cppinsights.io/
  https://taas.trust-in-soft.com/tsnippet/#
  http://quick-bench.com/
  https://ideone.com/
  https://wandbox.org/


VIZ: Header-only libs
  https://github.com/nothings/single_file_libs

VIZ: Single-file libs
  https://github.com/nothings/stb


Tools infra
  https://github.com/xyproto/cxx
