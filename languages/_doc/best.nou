%%%% BEST -- unbeatable superiority of each language

= Workflow advantages provided by each language
= How exactly each language changes your mental processes

CMP
  https://myemail.constantcontact.com/Language-lessons-in-Nim--Kotlin--TypeScript-and-more---save-42-.html?soid=1101335703814&aid=h--z1xLaOkQ


Haskell
  "Write code by itself" using types suggestion
    e.g. https://reasonablypolymorphic.com/blog/typeholes/

  BET? => Idris2 ALT:BET! dependent types directly in Haskell ※⡞⣓⣐⠜
  NEED: Lisp-like online editing
    https://mail.haskell.org/pipermail/ghc-devs/2014-October/006771.html
    FLOW: https://www.reddit.com/r/haskell/comments/3rfuoh/what_is_your_haskell_workflow_how_to_easily_try/
  ALT:MAYBE: inter-operation ※⡞⣓⣓⡬


Lisp
  Changing already running on-the-fly function by function

  OR?CHECK: some dialect of Scheme
    = strong type system like Idris2 + online editing like Lisp
    https://stackoverflow.com/questions/110911/what-is-the-closest-thing-to-slime-for-scheme
  NEED: strong type system ※⡞⣓⣟⣲
  MAYBE: no garbage collection :: carp-lang: A statically typed lisp, without a GC, for real-time applications. ※⡞⣓⣦⡱


J
  Funniest way to f*ck your brain


C
  Small system utils with full error processing written strictly by specs


C++
  Easiest to link with existing code -- if you keep sane complexity


Perl
  Parsing and generating text files

  code-generation
    ~ if/switch for drivers by spec tables
    ~ FSM tables
  build-scripts
  networking prototyping and stub-servers
  testload generation e.g. traffic for servers


Rust
  Тут у Rust'a много хороших штук. ⌇⡝⢿⡸⣨
    Компилятор следит за стилем наименования переменных, жалуется на лишние
    скобки, есть тулза для автоформатирования, числа с плавающей точкой нужно
    писать с точкой. Не получится забыть объявить переменную, нельзя сравнить
    разные типы, если в условии написать = вместо == то выдаст ошибку типа.
    Наверно, сюда ещё можно отнести отсутствие перегрузки функций, автовывод
    типов, макросы работающие не на строках, а с AST, иммутабельные по
    умолчанию переменные, предупреждения об неиспользуемых переменных и
    мутабельности. Ну что вспомнил, в целом язык более прозрачный чем все
    другие что я видел, а компилятор пытается помочь избежать ошибок.
