NICE: Network protocols without I/O (for both sync/async alike)
  https://sans-io.readthedocs.io/

SEE: vinta/awesome-python: A curated list of awesome Python frameworks, libraries, software and resources ⌇⡟⠧⣟⢶
  https://github.com/vinta/awesome-python

Cool man
  Interactive book «Problem Solving with Algorithms and Data Structures»
    http://aliev.me/runestone/
    https://github.com/aliev/runestone
    https://github.com/aliev/runestone/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0-%D0%B8%D0%B7-%D0%B8%D1%81%D1%85%D0%BE%D0%B4%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2
    http://habrahabr.ru/post/241696/
  Dynamic programming
    https://www.youtube.com/watch?v=iNTmu2STGGQ&list=PL28B7DAA8115A034C

Aspects
  Class attributes (static and dynamic members)
    http://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide#Handling-assignment
  faif/python-patterns: A collection of design patterns/idioms in Python ⌇⡞⣬⢩⣺
    https://github.com/faif/python-patterns

Interactive interpreter
  http://www.skulpt.org/

Argument parsing
  https://docs.python.org/3/library/argparse.html#module-argparse
  https://www.udemy.com/blog/python-command-line-arguments/
Flatten list
  list(itertools.chain.from_iterable(lst))

Sockets : client-server chat
  http://www.binarytides.com/code-chat-application-server-client-sockets-python/

> What vars are:
  https://rg03.wordpress.com/2007/04/21/semantics-of-python-variable-names-from-a-c-perspective/

> List operations
  http://effbot.org/zone/python-list.htm

Formatting output
  http://www.python-course.eu/python3_formatted_output.php

Snippets
  return (self.x ** 2 + self.y ** 2) ** 0.5
  map(lambda x, y: x * (y if y is not None else 1), *sorted([a, b], key=lambda x: len(x), reverse=True))
  ; def __hash__(self):  (P.S. only integers)
  ; USE: hash(el)
  results += 'Dir: %s\n' % os.path.join(root, name)

Compiling
 Adding to Bryan's answer, if you simply want to compile a file or a bunch of
 files from a terminal, the py_compile module can be executed as a script in
 the following manner:
  python -m py_compile fileA.py fileB.py fileC.py


%%% Properties
  https://pabloariasal.github.io/2018/11/25/python-descriptors/
    = low level explanation
  https://pabloariasal.github.io/python-decorators-from-the-ground-up/
