Виртуальное наследование

// Что выведет на экран данная программа?
#include <iostream>
using namespace std;

class A {
public:
    virtual void foo(){ cout<<"A"; }
};

class B: public virtual A {
public:
    virtual void foo(){ cout<<"B"; }
};

class C: public virtual A {};
class D: public B, public C {};

int main(void) {
    D d;
    C &c = d;
    c.foo();
    return 0;
}

// Пояснение: На экран выведется "B", т.к. у классов B и C виртуальное
// наследование и поэтому у класса D будет только один экземпляр класса A и,
// соответственно, один указатель на таблицу виртуальных функций, где
// прописывается B::foo()

// #  FreeX0h04.08.2011 | 14:02:03
// Классный вопрос. Поясню (может быть как-то криво выйдет)

// Когда вызывается конструктор D он смотри, какие B и C (есть ли среди них
// унаследованные от виртуальных классов). Они оба унаследованы, значит B и С
// унаследуются от одного "экземпляра" класса А. Затем вызывается конструктор A.
// После этого в таблице виртуальных функций находится функция от А. Затем
// вызывается конструктор для B, который перезатирает в таблице виртуальных
// функций в классе А функцию фуу. Вызывается конструктор для С.

// В итоге для D::C::A::foo будет функция печатающая "B"
