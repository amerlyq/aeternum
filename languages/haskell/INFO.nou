Tools
  Online
    https://repl.it/languages/haskell


Post-mortem ⌇⡞⣓⣓⡬
  Lisp -> Haskell ⌇⡞⣓⣮⣂
    https://markkarpov.com/post/lisp-and-haskell.html
  Haskell -> Lisp
    https://www.quora.com/What-do-Lisp-programmers-think-of-Haskell
  Interoperation
    https://wiki.haskell.org/Haskell_Lisp
    https://softwareengineering.stackexchange.com/questions/18838/haskell-and-lisp-vs-haskell-or-lisp


TUT
  [_] !!! SEE: The Functional Programmer's Toolkit - Scott Wlaschin
    https://www.youtube.com/watch?v=Nrp_LZ-XGsY&t=2234s
   = The functional programming community has a number of patterns with
     strange names such as monads, monoids, functors, and catamorphisms.
  [_] Design Patterns in Functional programming by Scott Wlaschin
     https://www.youtube.com/watch?v=X_WcbyQ19YM
   = How to see them in imperative programming and what to NOT do
  Domain Modeling Made Functional - Scott Wlaschin
    https://youtu.be/Up7LcbGZFuo
  BOOK:RU: http://anton-k.github.io/ru-haskell-book/book/home.html
  https://haskell-lang.org/
    https://github.com/haskell-foundation/foundation
    ++ https://github.com/commercialhaskell/intero
      http://commercialhaskell.github.io/intero/
  BOOK: Simon Marlow -- Parallel and Concurrent Programming in Haskell


DEBUG:
  types
    TUT fmap() vs (.) -- step by step
      https://stackoverflow.com/questions/27883414/difference-between-function-composition-operator-and-fmap
  Error messages
    Use typehole "_" so Haskell will write code by itself :)
      https://reasonablypolymorphic.com/blog/typeholes/
      ++ https://reasonablypolymorphic.com/blog/theorems-for-free/


Monads
  TUT: http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html
    TUT: http://learnyouahaskell.com/a-fistful-of-monads
  +++ Pro and Cons
    https://medium.com/zendesk-engineering/dont-fear-the-monad-f424260f29f6
    https://grishaev.me/en/no-monads
  [_] READ: Free monads are harmful
    https://markkarpov.com/post/free-monad-considered-harmful.html
    ALSO: http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html
  G: monads limitations
  ALSO: Implementing Algebraic Effects in C “Monads for Free in C”
    Microsoft Research Technical Report MSR-TR-2017-23
  Stream monad
    https://patternsinfp.wordpress.com/2010/12/31/stream-monad/


Haskell
  2016-05-10 [X] TRY:USE: xmonad
  [_] TRY: IDE http://leksah.org/
  Язык Haskell: О пользе и вреде лени
    https://ru.wikibooks.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_Haskell:_%D0%9E_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%B5_%D0%B8_%D0%B2%D1%80%D0%B5%D0%B4%D0%B5_%D0%BB%D0%B5%D0%BD%D0%B8
    http://absurdopedia.wikia.com/wiki/Haskell
  >> https://github.com/Gabriel439/post-rfc/blob/master/sotu.md
    http://lambda-the-ultimate.org/node/485
  Over 130 Practical Recipes For Data Analysis and Machine Learning
    http://haskelldata.com/
  +++ Write Yourself a Scheme in 48 Hours tutorial (highly recommended, by the way)
    https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours
    http://stackoverflow.com/questions/1931875/when-is-it-ok-to-use-an-ioref
  > What I wish I knew when learning Haskell
    http://dev.stephendiehl.com/hask/
  Useful Applications
    http://programmers.stackexchange.com/questions/246822/is-haskell-appropriate-for-signal-processing-communication-systems-and-informat
  Blog
    http://bartoszmilewski.com/category/haskell/
    http://bartoszmilewski.com/2014/10/17/c-ranges-are-pure-monadic-goodness/
    :~ Matan-like ground
    := Очень советую там будет мануал из четырех частей про монадки и плюсы
    Learn you a haskell for greater good
    : http://learnyouahaskell.com/chapters
    http://blog.ezyang.com/archives/
    := Many articles about aspects
    ++ http://qnikst.github.io/
  REF
    http://seanhess.github.io/2015/08/04/practical-haskell-getting-started.html
    > http://stackoverflow.com/questions/5710078/in-haskell-performing-and-and-or-for-boolean-functions
    http://ruhaskell.org/
  Evaluation
    https://wiki.haskell.org/Evaluation_order_and_state_tokens
    https://news.ycombinator.com/item?id=5083355
  Monads
    https://github.com/anton-k/monads-for-drummers
    >> https://wiki.haskell.org/All_About_Monads


Idioms
  http://www.haskellforall.com/2012/07/breaking-from-loop.html
    https://wiki.haskell.org/Monad_Transformers_Tutorial
