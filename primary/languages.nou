!!! Insights
  https://www.infoq.com/presentations/We-Really-Dont-Know-How-To-Compute
  http://www.stroustrup.com/dne.html
    = The Design and Evolution of C++

Syntax comparisons
  http://hyperpolyglot.org/
  https://learnxinyminutes.com/

Catalogue
  +++ https://en.wikipedia.org/wiki/List_of_programming_languages_by_type

Functional prg
  https://habrahabr.ru/post/228893/

>>> Good review
  http://blog.fourthbit.com/2014/03/01/the-best-programming-language-or-how-to-stop-worrying-and-love-the-code
  https://wiki.python.org/moin/LanguageComparisons
  ++ http://lambda-the-ultimate.org/node/2491
    nice discussion on diff langs
  https://xivilization.net/~marek/blog/
  https://www.isp.uni-luebeck.de/sites/default/files/lectures/ws_2015_2016/CS%25203702%2520BachSemInf,%2520,%2520CS%25203703%2520BachSemMI,%2520,%2520CS%25205480%2520SemSSE,%2520,%2520CS%25205840%2520SemiEngl/copl-proceedings.pdf
  https://news.ycombinator.com/item?id=1944913
    = Which programming book you just couldn’t stop reading from start to end?


vector processing languages E.G: J, K, Q
  https://kx.com/2015/02/13/vector-processing-languages-big-data-analytics-real-time-business-intelligence/
    http://conceptualorigami.blogspot.com/2010/12/vector-processing-languages-future-of.html

Languages Tree
>>> https://en.wikipedia.org/wiki/Generational_list_of_programming_languages
  http://www.metodolog.ru/node/1600
  https://upload.wikimedia.org/wikipedia/commons/2/25/Genealogical_tree_of_programming_languages.svg
  > https://webhome.csc.uvic.ca/~mcheng/330/spring.2016/index.html
    http://www.georgehernandez.com/h/xComputers/Programming/Languages.asp
  https://en.wikipedia.org/wiki/Programming_language
  https://en.wikipedia.org/wiki/Comparison_of_programming_languages
  https://en.wikipedia.org/wiki/Timeline_of_programming_languages
  https://en.wikipedia.org/wiki/Category:Data-structured_programming_languages

 Experienced programmers carry quite a number of patterns around in their
 heads. They may have learned these patterns from books or by hard won
 experience. The patterns enable a fluid style of programming where attention
 can be maintained on the unknown parts of the task at hand and work feels
 productive. Programmers tend to like programming languages that have good
 support for the patterns they use. Programmers don't like languages that
 disallow or inconvenience the patterns they use. They are also rarely
 impressed by language features that support patterns they don't know or use.

ALL
  Inspiration
    +++ https://habrahabr.ru/hub/crazydev/
  All langs -- cookbook
    http://pleac.github.io/pleac/
    http://webcache.googleusercontent.com/search?q=cache:dwoOulab3_wJ:http://www.ariel.com.au/jokes/The_Evolution_of_a_Programmer.html%2BThe_Evolution_of_a_Programmer&hl=en&&ct=clnk
    http://www.lysator.liu.se/c/bwk-on-pascal.html
    https://github.com/pleac/pleac

  Specific cases: dynamic+compiled, static+interpret
    http://stackoverflow.com/questions/2329460/which-languages-are-dynamically-typed-and-compiled-and-which-are-statically-typ

  Cool list of tools for different langs!
    https://github.com/bayandin/awesome-awesomeness

  Online compilers
    http://ideone.com/  | more then 60 langs

  Lex & yacc
    http://www.ibm.com/developerworks/aix/tutorials/au-lexyacc/

  Python vs Ruby
    https://dev.by/lenta/main/python-vs-ruby-kak-yazyk-programmirovaniya-vliyaet-na-vashu-rabotu
    https://www.quora.com/Is-Ruby-easier-better-than-Python-for-text-parsing
      Ruby isn't nice for text processing -- beside DSL
    ! TRY: Ruby has nice template/metaprogramming features

Idris
  + compiled
  = general purpose pure functional programming language with _dependent types_
  https://www.idris-lang.org/

Rust
  https://habrahabr.ru/post/321564/
  => compiled ?
  + http://rustbyexample.com/std_misc/fs.html

APL
  https://analyzethedatanotthedrivel.org/2010/11/12/the-return-of-apl-fingers-2/

Frink -- success of domain language
  https://frinklang.org/fsp/samples.fsp

Io -- ALT to lua
< with event-driven all operations
  http://www.iolanguage.com/
   the more I work in OO the more I am drawn to prototype-based OO; and all
   the Io code samples I’ve seen are beautiful.
  -- homoiconic!

Smalltalk -- ALT to Lisp
< with event-driven methods call (embedded concurrency)
  http://www.squeak.org/
   one of those languages I feel like I already know from many years of
   tangential exposure, but it would be nice to be able to build a real app
   in it.

ALT haskell
  https://github.com/ermine-language

Scala
  http://www.scala-lang.org/
   learning Haskell left behind a lingering itch to play with powerful type
   systems that help rather than hinder, and Scala seems like a pragmatic
   environment in which to do so.

Clojure -- ALT to Lisp on JVM
  http://clojure.org/
   the early buzz is growing on this one. Good documentation for a young
   language, and I like a lot of the design decisions.

PROLOG
  SEE  SWI-Prolog -- term_expansion(T, R)
  http://en.wikipedia.org/wiki/Prolog
   the only language in this list which would actually expose me to a
   programming paradigm I am not terribly familiar with.
  http://www.amzi.com/AdventureInProlog/index.php  | Cool! Like erlang-demo!
  http://www.swi-prolog.org/build/Debian.html

    David H. D. Warren created what came to be known as the Warren Abstract Machine
    (WAM) as a way to compile Prolog - this made a fundamental change in Prolog
    implementation and provided an enormous improvement in Prolog program
    performance. This made Prolog a viable general-purpose programming language.
    The WAM became the foundation of most subsequent logic programming
    implementations. Although it is a small abstract machine (39 instructions) it
    is very challenging to understand even when carefully presented, as done by
    Hassan Aït-Kaci in his A Tutorial Reconstruction. The WAM is a brilliant
    combination of deep insight into Prolog programming language semantics, data
    structure design, and software architecture.
        https://en.wikipedia.org/wiki/David_H._D._Warren
        https://en.wikipedia.org/wiki/Warren_Abstract_Machine
        http://hassan-ait-kaci.net
        http://wambook.sourceforge.net
  SEE
    https://www.dcc.fc.up.pt/~vsc/Yap/
    https://github.com/keithj/cl-prolog
    http://www.cliki.net/Prolog
      http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/prolog/impl/prolog/ppicl/0.html
        http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/prolog/impl/prolog/ppicl/ppicl.cl
    http://teyjus.cs.umn.edu/
      = Lambda Prolog :: lambda tree syntax :: pattern unification
      https://github.com/teyjus/teyjus/wiki/TeyjusManual
  How I tried to not become a logic programmer
    https://dtai.cs.kuleuven.be/projects/ALP/newsletter/aug08/content/Historical/content.html
  Prolog vs Minikanren
    http://stackoverflow.com/questions/28467011/what-are-the-main-technical-differences-between-prolog-and-minikanren-with-resp
  Towards Banishing the Cut from Prolog
    http://www.academia.edu/31138551/Towards_banishing_the_cut_from_Prolog
    https://pdfs.semanticscholar.org/cba3/8a997be8923ac8efae940f00ea2ec26becea.pdf
    http://edc-connection.ebscohost.com/c/articles/14370298/towards-banishing-cut-from-prolog

  Books on logic programming
    Logic Program Synthesis and Transformation: Proceedings of LOPSTR
      https://books.google.com.ua/books?id=EcPgBwAAQBAJ&pg=PA212&lpg=PA212&dq=toward+banishing+the+cut+from+prolog&source=bl&ots=81MtCcwZmW&sig=SKF_qvAyyVH-ePnieX9rFr7BlGc&hl=en&sa=X&redir_esc=y
    https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D1%81%D1%8F%D1%82%D0%BE%D0%B5_%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D0%BE_%D0%93%D1%80%D0%B8%D0%BD%D1%81%D0%BF%D0%B5%D0%BD%D0%B0
  AI
    + https://stackoverflow.com/questions/5224524/lisp-and-prolog-for-artificial-intelligence
    https://www.quora.com/What-are-good-examples-of-code-generators-written-in-Common-Lisp-Prolog
    https://news.ycombinator.com/item?id=772391

  TRY
    http://www.gprolog.org/
      http://www.gprolog.org/manual/html_node/gprolog005.html
      http://www.gprolog.org/manual/gprolog.html

Markdown
  https://guides.github.com/features/mastering-markdown/

Forth  #forth
  ++ E.G. https://rosettacode.org/wiki/OpenGL#Forth
  http://habrahabr.ru/post/29967/
  http://habrahabr.ru/post/209730/
  : Изначально ядро этого языка представляет из себя некий словарь: набор
  : слов, при помощи которых мы можем выполнять некоторый поднабор операций
  : над данными.  При этом основной единицей языка собственно и является
  : СЛОВО. Мы можем использовать уже имеющиеся слова (DUP — дублировать
  : лежащий на вершине стека элемент, SWAP — поменять местами два верхних
  : элемента стека, и так далее), так и определять свои собственные. В общем
  : то, именно определение своих слов, через имеющиеся, а затем все более
  : новых и новых слов — это и есть основной механизм программирования на
  : Форте.
  http://www.forth.org.ru / ≈ Russian FORTH Interest Group ≈ on a site the big selection of books and papers on the Fort is allocated, it is a lot of links to existing Forts-systems, the interested very much is recommended to visit
  http://www.nncron.ru/index_ru.shtml ≈ the advanced scheduler of tasks under Windows, an instance of mercantilely successful program in language the Fort
  http://winglion.ru / ≈ the self-made Fort-processor, a site contains sensible enough forum on the Fort
  http://www.msyst.ru/quark.htm ≈ the Fort-system with support OpenGL in a type.dll
  http://ronware.org/ ≈ krossplatformennyj Fort Windows 32bit (x86) ≈ Linux 32bit (x86) ≈ WinCE (ARM)
  http://forth.gsfc.nasa.gov / ≈ the list of systems NASA controlled the Fort

Fort
  Кроме размера вопрос еще в том, чтобы уложить ВМ и байт-код только в один
  .exe файл как можно меньшего размера. Мы в свое время смотрели разные
  языки, но такого, который удовлетворял всем условиям так и не нашли. Может
  плохо смотрели.  Как раз задача для Форта. Минимальный транслятор
  несколько килобайт буквально. Программа компилируется по мере ввода.
  exe-файл — дамп памяти по сути.  Правда для человека, считающего
  Си-подобный синтаксисом хорошим для скриптовых языков, будет сложновато
  разобраться с синтаксисом (одна обратная бесскобочная запись выражений
  чего стоит)Фортом.

Nim ? -- imperative, elegant, parallel, compiles in C
  http://nim-lang.org/
  #nim

Julia 2017
  https://julialang.org/


++ Eve -- relational language with concepts ecosystem
  http://witheve.com/
  ++ http://www.chris-granger.com/
    http://play.witheve.com/#/examples/quickstart.eve


GNU R
  Front-end for bash and pipe-capabilities
  : http://stackoverflow.com/questions/3205302/difference-between-rscript-and-littler
    http://dirk.eddelbuettel.com/code/littler.html
  Using for analysis as Wolfram
    http://tuxette.nathalievilla.org/?cat=78

Go (golang)
  Why Go is not good
    ! http://yager.io/programming/go.html


> FUTURE <

Scheme
  : As Lisp alternative?
  [_] READ: Harold Abelson and Gerald Jay Sussman with Julie Sussman
    [disk] Structure and Interpretation of Computer Programs
      http://mitpress.mit.edu/sicp/
      https://github.com/kana/sicp/commits?author=kana
   - Most implementations have only hygienic macro, which can't define new macro
   - Need to re-implement many of standartized libs and funcs
     (its only 50pgs vs 1300pgs in CL)

  >> Has sense to return to it after CL, concentrating on Guile and Racket

  Guile (embedded scheme) -- for linux scripting?

  Racket
  : The language acts like an operating system for loading and managing other programs
  : Racket's contract system is inspired by the Design by Contract work for Eiffel
    https://en.wikipedia.org/wiki/Racket_(programming_language)
    http://realmofracket.com/

Linda
  https://en.wikipedia.org/wiki/Linda_(coordination_language)
    https://en.wikipedia.org/wiki/Ease_programming_language
  https://en.wikipedia.org/wiki/Tuple_space
    # Space for parallel processing with pattern matching instead of linear addressing
    ALT: https://en.wikipedia.org/wiki/Message_Passing_Interface


# See if anything useful can be derived from here
Ada as language in usage (notes)
  https://johntortugo.wordpress.com/2016/06/18/the-ada-programming-language/#more-841
    https://github.com/JohnTortugo/Babel/blob/master/Ada/notes.txt


> NO <
  Nemerle
    based on .NET, can use matching and code generation, some concepts
    from lisp -- but is too much overloaded.
  K
    no community and docs, trading oriented, proprietary
    : https://github.com/kevinlawler/kona
  Ruby ->
    Crystal
      https://crystal-lang.org/
