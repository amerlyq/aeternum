%%%% C++11
  Regex
    http://en.cppreference.com/w/cpp/regex/ecmascript

  FAQ
    http://c-faq.com/
      http://c-faq.com/osdep/cbreak.html

  Bestiary
    ++ http://videocortex.io/2017/Bestiary/

  Guideline
    https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#f16-for-in-parameters-pass-cheaply-copied-types-by-value-and-others-by-reference-to-const

  Anonymous namespace vs static
    http://www.comeaucomputing.com/techtalk/#nostatic
    https://stackoverflow.com/questions/4181059/linkage-of-symbols-within-anonymous-namespace-within-a-regular-namespace
      https://stackoverflow.com/questions/4977252/why-an-unnamed-namespace-is-a-superior-alternative-to-static
      https://stackoverflow.com/questions/11016220/what-are-inline-namespaces-for
      https://stackoverflow.com/questions/5780918/hiding-a-c-class-in-a-header-without-using-the-unnamed-namespace
    CHECK: hiding symbols with "-fwhole-program or -flto"
      https://stackoverflow.com/questions/18932237/c-inline-keyword-and-compiler-optimization
      https://kristerw.blogspot.com/2017/05/interprocedural-optimization-in-gcc.html
        -fwhole-program makes all functions local to the translation unit, unless you explicitly tell the compiler they are externally visible.

  Passing vars -- shared_ptr vs const ref
    https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/

  virtual methods / vtable optimization (redundancy)
    http://lazarenko.me/devirtualization/

  Undefined behavior
    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html
    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html
    http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html


Nightmares
  CppCon 2018: Nicolai Josuttis “The Nightmare of Initialization in C++”
    https://www.youtube.com/watch?v=7DTlWPgX6zs
  CppCon 2018: Richard Powell “How to Argue(ment)"
    https://www.youtube.com/watch?v=ZbVCGCy3mGQ
  Templates -- compile time is important for maintenance
    https://habr.com/ru/company/jugru/blog/438260/
    Evolution: C -> C++ -> C++ STL -> C++ -> C
      https://twitter.com/ChristerEricson/status/1078095388244996096
        Goal of programmers is to ship, on time, on budget. It’s not “to
        produce code.” IMO most modern C++ proponents 1) overassign importance
        to source code over 2) compile times, debugability, cognitive load for
        new concepts and extra complexity, project needs, etc. 2 is what matters.


TALK
  [_] The next big Thing - Andrei Alexandrescu - Meeting C++ 2018 Opening Keynote
    https://www.youtube.com/watch?v=tcyb1lpEHm0
      = see his vision
  [_] SEE Inheritance and operator=()
    https://www.youtube.com/watch?v=QGcVXgEVMJg
  [_] CppCon 2015: Andrei Alexandrescu “Declarative Control Flow"
    https://www.youtube.com/watch?v=WjTrfoiB0MQ
      https://github.com/cppcon/cppcon2015
  [_] CppCon: async IO
    https://www.youtube.com/watch?v=2UC6_rfJuAw
  [_] SEE: using Templates in C++
    https://www.youtube.com/watch?v=UQf488GQXlY&feature=push-u-sub&attr_tag=FZvJmp5IiTFNGmZR-6
  [_] SEE: mighty UTF-8
    https://www.youtube.com/watch?v=ysh2B6ZgNXk&t=2670s
  [_] CppCon 2017: Anastasia Kazakova “Tools from the C++ eco-system to save a leg”
    https://www.youtube.com/watch?v=30r_SsOjg2E
  [_] Raymond Hettinger - Beyond PEP 8 -- Best practices for beautiful intelligible code - PyCon 2015
    https://www.youtube.com/watch?v=wf-BqAjZb8M
  [_] Scott Meyers – The Most Important Design Guideline
    https://www.youtube.com/watch?v=5tg1ONG18H8
  [_] CppCon 2017: Vinnie Falco “Make Classes Great Again! (Using Concepts for Customization Points)”
    https://www.youtube.com/watch?v=WsUnnYEKPnI&feature=youtu.be
  [_] std::async is BAD
    = std::async one of the worst function in the modern C++
    https://bartoszmilewski.com/2011/10/10/async-tasks-in-c11-not-quite-there-yet/
    ALSO: Effective Modern C++ by Scott Myers
  [_] About lambdas
    https://www.youtube.com/watch?v=WXeu4fj3zOs
  [_] Exception
    https://channel9.msdn.com/Events/CPP/C-PP-Con-2014/016-Exception-Safe-Code-Part-I
    https://channel9.msdn.com/Events/CPP/C-PP-Con-2014/023-Exception-Safe-Code-Part-II
    https://channel9.msdn.com/Events/CPP/C-PP-Con-2014/026-Exception-Safe-Code-Part-III
    ++ https://www.youtube.com/watch?v=GC4cp4U2f2E
    ++ https://www.youtube.com/watch?v=LfRLQ7IChtg&list=WL&index=48&t=0s
    +++ https://akrzemi1.wordpress.com/2011/10/05/using-stdterminate/
      https://akrzemi1.wordpress.com/2011/09/28/who-calls-stdterminate/
  [_] CppCon 2017: Hartmut Kaiser “The Asynchronous C++ Parallel Programming Model”
    https://youtu.be/js-e8xAMd1s
  READ
    [_] https://blog.jetbrains.com/clion/2017/11/towards-a-more-powerful-and-simpler-cpp-with-herb-sutter/
    [_] http://www.sqlite.org/isolation.html
    Code Review
      https://m.habrahabr.ru/post/340550/
      https://m.habrahabr.ru/post/342244/
  TRY (c) smil3y0u
    [_] https://github.com/cisco/openh264
  [_] NULL existence is worst mistake in CS ever
    https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/
  CMP непонятный код у новичков vs тупой код у опытных
    https://habrahabr.ru/post/347166/
    https://habrahabr.ru/post/349336/
  CppCon 2018: Bjarne Stroustrup “Concepts: The Future of Generic Programming (the future is here)”
    https://www.youtube.com/watch?v=HddFGPTAmtU&feature=youtu.be
  CppCon 2018: Kris Jusiak “State Machines Battlefield - Naive vs STL vs Boost”
    https://www.youtube.com/watch?v=yZVby-PuXM0
  What do you do when your Codebase is Old Enough to Vote
    https://www.youtube.com/watch?v=hCi8oZWL1js&feature=youtu.be
  CppCon 2016: Nicholas Ormrod “The strange details of std::string at Facebook"
    https://www.youtube.com/watch?v=kPR8h4-qZdk


DEBUG
  Show #include (module *.c) relpath "" -> gcc impl-defined <>
    $ cpp -v /dev/null -o /dev/null
    WARN! srcs are searched in same order as -I => can't override by later flags
    $ cpp -I/tmp -I/var -iquote /home -v /dev/null -o /dev/null
      ALSO: -isystem -nostdinc
    ATT: q-include "" is searched relative to "currently processed" *.h / *.cpp, NOT pwd
      REF: https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html
      TUT: http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art026
      https://stackoverflow.com/questions/3162030/difference-between-angle-bracket-and-double-quotes-while-including-heade
  Print lib path which will be used
    $ gcc -print-file-name=libc.a
    OR $ gcc -print-libgcc-file-name
       # to link manually when using -nostdlib
  Investigate intermediate files
    $ gcc -save-temps ...
  Check paths to includes and libs to link
    $ gcc -H -v -print-search-dirs -o main main.c
    ALT: $ gcc -### ...
  Trace linker libs
    $ gcc -Wl,--trace main.c -o main -L. -lmylib


%% Snippets
  http://www.geonius.com/software/index.html#libgpl


%%% GCC
  GCC6
    https://gcc.gnu.org/gcc-6/changes.html
    https://gcc.gnu.org/gcc-6/porting_to.html
  Performance optimizations
    ++ http://stackoverflow.com/questions/14492436/g-optimization-beyond-o3-ofast

%%% General
  +++ Structure padding and alignment (low-level)
    http://www.catb.org/esr/structure-packing/
  ++ Placement New, Memory Dumps, and Alignment
    http://jrruethe.github.io/blog/2015/08/23/placement-new/
  !! Efficient argument passing in C++11
    http://www.codesynthesis.com/~boris/blog/2012/06/19/efficient-argument-passing-cxx11-part1/
  ++ Алёна C++ :: Приведение типов в C++
    http://alenacpp.blogspot.com/2005/08/c.html
  !! Mixing PIC/PIE with non-PIC == BAD
    http://stackoverflow.com/questions/8331456/mixing-pic-and-non-pic-objects-in-a-shared-library
    REF http://stackoverflow.com/questions/18026333/what-does-compiling-with-pic-dwith-pic-with-pic-actually-do
  ++ Linkers
    REF
      http://www.lurklurk.org/linkers/linkers.html
      Tut: +++ https://www.embeddedrelated.com/showarticle/900.php
    Linking Order of Libraries
      http://stackoverflow.com/questions/45135/why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc

%%% Standart
  Static (singleton) destruction
  https://sourcemaking.com/design_patterns/to_kill_a_singleton
    REF http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm#Destruction
    REF http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3338.html
        http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf
      # exactly after C++11 (and free)
    https://www.youtube.com/watch?v=c1gO9aB9nbs&feature=youtu.be&t=18m40s
    http://en.cppreference.com/w/cpp/utility/program/exit

%%% Inheritance
  # для обычных полей ( не вирт и не конструкторы )
        / pub | pro | pri
  | pub | pub | pro | pri
  | pro | pro | pro | ina
  | pri | pri | pri | ina

%%% Embedding data into ELF verbatim
  + http://stackoverflow.com/questions/4864866/c-c-with-gcc-statically-add-resource-files-to-executable-library
  http://stackoverflow.com/questions/19169039/symbol-names-when-embedding-data-in-executable-on-linux
  + http://gareus.org/wiki/embedding_resources_in_executables
  http://stackoverflow.com/questions/4158900/embedding-resources-in-executable-using-gcc/4158997#4158997
  http://www.linuxjournal.com/content/embedding-file-executable-aka-hello-world-version-5967
