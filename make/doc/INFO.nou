ALT:(make)
  SEE https://stackoverflow.com/questions/5110114/is-there-a-build-tool-based-on-inotify-like-mechanism
  ninja
    https://ninja-build.org/
  tup
    http://gittup.org/tup/
  SEE: |community/remake|


REF
  Index of Functions, Variables, Directives
    !!! https://www.gnu.org/software/make/manual/html_node/Name-Index.html
  Shell commands in make
    https://blog.melski.net/2010/11/15/shell-commands-in-gnu-make/
  Gather output of parallel jobs
    https://www.gnu.org/software/make/manual/html_node/Parallel-Output.html#Parallel-Output
  !!! [_] READ Makefile Style Guide
    http://clarkgrubb.com/makefile-style-guide#phony-targets
  !!! [_] REF dirnames -- use in my Makefiles
    http://www.gnu.org/software/make/manual/html_node/Directory-Variables.html
  TODO:READ: from 8.4
    http://www.gnu.org/software/make/manual/make.html#File-Name-Functions


SEE
  http://make.mad-scientist.net/papers/jobserver-implementation/
  ! BETTER:USE: Non-recursive make
    + https://evbergen.home.xs4all.nl/nonrecursive-make.html
    http://stackoverflow.com/questions/559216/what-is-your-experience-with-non-recursive-make
    https://github.com/dmoulding/boilermake
    https://code.google.com/archive/p/nonrec-make
    http://www.kolpackov.net/projects/build/benchmark.xhtml
  What's Wrong With GNU make -- READ 'Reliability' section (cons of make)
    http://www.conifersystems.com/whitepapers/gnu-make/
  +++ [_] http://david.rothlis.net/large-gnu-make/
  Build Java
    https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html
  Splitting long rules
    http://www.linuxdevcenter.com/pub/a/linux/2002/02/14/makefiles.html?page=2
  Kbuild> READ from :831
    https://android.googlesource.com/kernel/common/+/android-3.10-adf/Documentation/kbuild/makefiles.txt

Tips
  http://locklessinc.com/articles/makefile_tricks/
  ! http://make.mad-scientist.net/papers/rules-of-makefiles
  Metaprogramming
    2016-08-11 [X] http://make.mad-scientist.net/posts/
    USE $(file < ...) for dynamic programming
      https://www.gnu.org/software/make/manual/html_node/File-Function.html#File-Function
  Recursion
    https://www.gnu.org/software/make/manual/html_node/Options_002fRecursion.html#Options_002fRecursion
  Conditionals in recipes
    http://blog.yjl.im/2014/07/setting-variable-in-recipe-based-on.html
  VPATH mistakes
    !! http://make.mad-scientist.net/papers/how-not-to-use-vpath/
    !! https://www.cmcrossroads.com/article/basics-vpath-and-vpath
    ALT: vpath %.h /usr/include
  Multiarch builds
    http://make.mad-scientist.net/papers/multi-architecture-builds/
  Deps gen
    http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
  Using symlinks as targets (pitfall)
    http://stackoverflow.com/questions/10180912/is-dependency-on-a-symlink-possible-in-a-makefile
  ! export PATH dont work for $(shell ...)
    http://stackoverflow.com/questions/2838715/makefile-variable-initialization-and-export
  Makefile target-variable : when many
    http://stackoverflow.com/questions/1909188/define-make-variable-at-rule-execution-time


HACK
  Pipe errors
    Ad-hoc for bash
      make: $ cmd |& tee log && exit $${PIPESTATUS[0]}
      # ATT: mandatory '&&' before exit
      !!! BAD: no err when failed in the middle pipe
    Proper solution
      SHELL := $(shell which bash)
      .SHELLFLAGS := -euo pipefail -c
  passing arguments into make recipes
    http://stackoverflow.com/questions/2214575/passing-arguments-to-make-run
    $ make -- target [<args>]
  load average -- limit jobs
  # Don't launch new concurrent job when system is overloaded (be single-threaded)
    https://www.gnu.org/software/make/manual/html_node/Parallel.html
    $ make -l 2.5
  Replace spaces by colon
    SEE https://www.gnu.org/software/make/manual/html_node/Syntax-of-Functions.html#Syntax-of-Functions
   empty :=
   space := $(empty) $(empty)
   PATH := $(subst $(space),:,$(dirs))


USAGE
  Targets
    boldly make all (always rebuild)
      $ make -B
    ignore (treat as old)
      $ make -o $tgt
      * up-to-date other tgts beside specified
      * temporary ignore changes in req*, unrelated to tgts
    query state up-to-date
      $ make -q $tgt
    timestamps set up-to-date (similar to 'touch')
      $ make -t
      * ignore changes in req*, unrelated to tgts
      * supply/merge manully created tgts by external means
    pretend file was modified (but its timestamps remains the same!)
      $ make -W $tgt
MAKEFLAGS MAKELEVEL
      * w/ '-n' to trace rebuild paths (E.G. unit tests for build system)
      * w/o '-n' to suppress recipes for choosen tgts
  Compile errors
    keep going (try building all pending rules)
      $ make -k
      * gathers maximum errors to show from all targets
  Override VAR
    SEE:(at bottom): ./var-override.mk
  Expansion
    WARN: values (both env and cmdline) are *ALWAYS* expanded
    make: v:=$(VAR)
    $ make VAR="\$(shell pwd)"


DEBUG
  Print DFL rules/vars for make
    $ make -p -f/dev/null
  + https://www.safaribooksonline.com/library/view/managing-projects-with/0596006101/ch12.html
  http://bashdb.sourceforge.net/remake/  # remake dbg
  $ make --trace  $ ALT: for older make $ make --debug=j
  $ make -n target  $ --dry-run -- print commands to execute
  $ make -d  $ accompany output with rebuild decision metainfo
  $ make -p -f /dev/null $ --print-data-base -- all VAR values
  Test makefile on dependency on DFL
    $ make -rR
  eval -> info
    http://make.mad-scientist.net/the-eval-function/
  List all targets to be rebuilt on next run
    $ make --dry-run -d | sed -n "/Must remake target '/{s///;s/'\.\$//;p}" | command grep -vE '/(all|build|depend)$'
    OR: $ r.sir-make-debug
