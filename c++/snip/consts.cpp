// Порядок слов - не важен.
// Изменить эту переменную, используя это имя - нельзя.
// Но и через неконстантный указатель не получится - не откомпилируется присваивание.
const int ca = 1;
int const cb = 2;
//cb = 3;
int d = 0;
int e = 0;
int *pd = &d;
//pd = &ca;

// Указатель, который не разрешает изменения любых (не константных в том числе) переменных, но может читать их значения.
// Аналогичен константному итератору. Итерирует по чему угодно, но изменение не разрешает.
const int *pa = &ca;
int const *pb = &cb;
pa = &cb;
//(*pa)++;
pa = &d;
//(*pa)++;
pa++; // вообще если его теперь прочитать - выдасту рантайм еррор.

// Можно менять сам адресуемый объект, но на другой его не сменишь
int * const pca = pd;
//pca = &e;
(*pca)++;

// Логично, что эта конструкция не позволит ничего.
// Зато ею всегда можно сослаться на что угодно константное, чем бы они ни было.
// Она константа по отношению к внешним объектам - не меняет их. И к внутренним - ничто ее не заменит на другую.
const int * const cpca = pd;
int const * const cpcb = &cb;
//(*cpca)++;
//cpca = &e;
//fprintf(stdout,"d : %i\n", d);

// Выдаёт варнинг на дублирование двух констант
//const int const * const cpcd = &e;
