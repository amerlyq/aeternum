#!/usr/bin/env python3
#⌇⡞⣭⢫⡐
# SEE: https://github.com/igordejanovic/parglare/blob/master/examples/csv/csv.py

import sys

# grammar = r'''
# text: NL* | NL* block;
# block: n_line+ NL+ | EMPTY;
# n_line: line NL | line;
# terminals
# line: /.+/;
# NL: "\n";
# '''

## CASE: trailing
# all: vspace? n_line*;
# n_line: line vspace?;
## CASE: leading
# all: line? vspace? | line? n_line+ vspace?;
#   ALT:BAD:(shift/reduce): all: line? n_line* vspace?;
#   [_] THINK:WHY?
# n_line: vspace line;
## CASE: surround BAD:(collect_sep): lose all intermediate newlines
# all: vspace? | vspace? lines vspace?;
# @collect_sep
#   ALT:BAD(shift/reduce): @pass_single || lines: line+[vspace];
# lines: lines vspace line | line;
# line: /.+/;

grammar = r'''
all: vspace? | tasks vspace?;

@collect
tasks: tasks task | task;
task: vspace? text subtask?;

// details: subtask+;

subtask: lvl1 text;
lvl1: vspace indent;

terminals
text: /\S.+/;
vspace: /\n+/;
// lvl1: /\n*[ \t]{2}/;
indent: /[ \t]+/;
'''

texts = [
    '',
    '\n',
    '\n\n',
    '\n\n\n',

    'myline',
    'myline\n',
    'myline\n\n',
    'myline\n\n\n',
    '\nmyline',
    '\n\nmyline',
    '\n\n\nmyline',
    '\nmyline\n',
    '\nmyline\n\n',
    '\n\nmyline\n',
    '\n\nmyline\n\n',

    'myword1 myword2',
    'myword1 myword2\n',

    'myline1\nmyline2',
    'myline1\n\nmyline2',
    'myline1\n\n\nmyline2',
    'myline1\n\nmyline2\n',
    'A1\nA2\n\nB1\nB2\n',
    'A1\n  A2\n\n  B1\nB2\n',
    '  A1\nA2\n\nB1\n  ',
]


def main(argv):
    import re
    from parglare import Parser, Grammar
    g = Grammar.from_string(grammar, re_flags=re.MULTILINE)
    kw = dict(debug=True, debug_colors=True) if '-d' in argv else {}
    parser = Parser(g, build_tree=True, ws='', debug_layout=True)
    parser = Parser(g, ws=False, **kw)

    ## ALT: multiple variants
    # from parglare import GLRParser
    # parser = GLRParser(g, ws=False, **kw)

    with open(__file__) as f:
        texts.append(f.read())
    try:
        for i, t in enumerate(texts):
            print(f'({i}) {repr(t)}')
            print(parser.parse(t))
            print('-----')
    except Exception as ex:
        print(ex)
        # print(f'ERR: <- {repr(t)}')
        sys.exit(1)

if '__main__' == __name__:
    main(sys.argv)
